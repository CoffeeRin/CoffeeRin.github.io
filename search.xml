<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2023/11/05/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><i>markdown:通用html标签</i></p>
<p>标签后要加空格</p>
<p><u>块级元素：至少独占一行</u><br><u>行内元素：只占据自身所需空间</u></p>
<hr>

<p># 标题1<br>## 标题2<br>### 标题3</p>
<h1 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h1><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><hr>

<span id="more"></span>

<p>&gt;引用</p>
<h1 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h1><blockquote>
<p>引用</p>
</blockquote>
<hr>

<p>有序列表:<br>1. a<br>2. b<br>3. c</p>
<p>无序列表：<br>- A<br>- B<br>- C</p>
<p>任务列表：<br>- [ ] a<br>- [ ] b<br>- [x] c</p>
<h1 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h1><p>有序列表:</p>
<ol>
<li>a</li>
<li>b</li>
<li>c</li>
</ol>
<p>无序列表：</p>
<ul>
<li>A</li>
<li>B</li>
<li>C</li>
</ul>
<p>任务列表：</p>
<ul>
<li><input disabled="" type="checkbox"> a</li>
<li><input disabled="" type="checkbox"> b</li>
<li><input checked="" disabled="" type="checkbox"> c</li>
</ul>
<hr>

<p>代码块：<br>``` c(此处c表示代码是C语言)<br>int main():<br>{<br>    printf(“Hello world”);<br>}<br>```<br>行内代码:<br>`&#96; printf(Hello wold!)&#96;&#96;;</p>
<h1 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h1><p>代码块：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>行内代码:<br><code> printf(Hello wold!)</code>;</p>
<hr>

<p>数学公式：有美元符号$才能识别lateX</p>
<p>$$<br>\frac{\partial f}{\partial x} = 2\sqrt{a}x<br>$$</p>
<p>行内数学公式：<br>$\theta &#x3D; x^2$</p>
<h1 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h1><p>数学公式：有美元符号$才能识别lateX<br>$$<br>\frac{\partial f}{\partial x} &#x3D; 2\sqrt{a}x<br>$$</p>
<p>行内数学公式：<br>$\theta &#x3D; x^2$</p>
<hr>

<p>表格：“:”决定居中居左具右<br>| 姓名 | 年龄 | 成绩 |<br>| :— | —: | :—: |<br>| 张三 | 22 | 92 |</p>
<h1 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h1><p>表格：“:”决定居中居左具右</p>
<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="right">年龄</th>
<th align="center">成绩</th>
</tr>
</thead>
<tbody><tr>
<td align="left">张三</td>
<td align="right">22</td>
<td align="center">92</td>
</tr>
</tbody></table>
<hr>

<p>脚注：<br>脚注[^脚注]<br>[^脚注]:脚注</p>
<h1 id="效果：-6"><a href="#效果：-6" class="headerlink" title="效果："></a>效果：</h1><p>脚注[^脚注]<br>[^脚注]:脚注</p>
<hr>

<p>横线：</p>
<p>- - -或***或_ _ _</p>
<h1 id="效果：第一条虚线"><a href="#效果：第一条虚线" class="headerlink" title="效果：第一条虚线"></a>效果：第一条虚线</h1><hr>
<hr>

<p>链接：<br>[百度](baidu.com “一个搜索引擎”)<br>例子：给标题设置链接<br>请参考[标题1](#标题1)</p>
<p>引用链接：引用需要回车<br>[百度][id],[百度][id],[百度][id]</p>
<p>[id]: baidu.com &quot;一个搜索引擎”</p>
<p>URL:输入网页链接格式，自动识别<br>https:&#x2F;&#x2F;<a href="http://www.baidu.com/">www.baidu.com</a></p>
<h1 id="效果：-7"><a href="#效果：-7" class="headerlink" title="效果："></a>效果：</h1><p>链接：<br><a href="baidu.com" title="一个搜索引擎">百度</a><br>例子：给标题设置链接<br>请参考<a href="#%E6%A0%87%E9%A2%981">标题1</a></p>
<p>引用链接：引用需要回车<br><a href="baidu.com" title="一个搜索引擎">百度</a>,<a href="baidu.com" title="一个搜索引擎">百度</a>,<a href="baidu.com" title="一个搜索引擎">百度</a></p>
<p>URL:输入网页链接格式，自动识别<br><a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<hr>

<p>图片：相对地址、绝对地址、网址链接</p>
<p>![百度](https:&#x2F;&#x2F;pss.bdstatic.com&#x2F;static&#x2F;superman&#x2F;img&#x2F;logo&#x2F;logo_white-d0c9fe2af5.png “百度LOGO”)</p>
<h1 id="效果：-8"><a href="#效果：-8" class="headerlink" title="效果："></a>效果：</h1><p><img src="https://pss.bdstatic.com/static/superman/img/logo/logo_white-d0c9fe2af5.png" alt="百度" title="百度LOGO"></p>
<hr>

<p>*斜体*</p>
<p>**加粗**</p>
<p>&gt;引用</p>
<p>~~删除线~~</p>
<p>&lt;u&gt;下划线&lt;&#x2F;u&gt;</p>
<p>高亮：=&#x3D;高亮&#x3D;&#x3D;</p>
<p>下标：H~2~O</p>
<p>上标：X^2^</p>
<p>表情符号：:smile:<br><br></p>
<h1 id="效果：-9"><a href="#效果：-9" class="headerlink" title="效果："></a>效果：</h1><p><em>斜体</em></p>
<p><strong>加粗</strong></p>
<blockquote>
<p>引用</p>
</blockquote>
<p><del>删除线</del></p>
<p><u>下划线</u></p>
<p>高亮：&#x3D;&#x3D;高亮&#x3D;&#x3D;</p>
<p>下标：H<del>2</del>O</p>
<p>上标：X^2^</p>
<p>表情符号：:smile:</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/11/06/Linux/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><p>父子进程不共享变量，子进程和父进程分别执行程序</p>
</li>
<li><p>创建子进程（父子进程程序相同，进程号不同）并执行时，父子进程分别为2个程序，同时执行各自程序</p>
</li>
<li><p>线程共享</p>
</li>
<li><p>terminal运行.&#x2F;a.out &amp;，’&amp;’表示后台运行    <a href="https://blog.csdn.net/z19861216/article/details/130848954">相关链接</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/05/HelloWorld/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>实验8</title>
    <url>/2023/11/27/%E5%AE%9E%E9%AA%8C8/</url>
    <content><![CDATA[<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><blockquote>
<ul>
<li><p><strong>可靠信号</strong>（Reliable Signals）： 这种信号在发送时不会丢失，系统会确保信号最终被接收。当进程处于阻塞状态时，可靠信号会被排队，直到进程解除阻塞后才被传递。SIGINT通常被认为是可靠信号。</p>
</li>
<li><p><strong>不可靠信号</strong>（Unreliable Signals）： 这种信号可能在发送时丢失，而且不会在信号过多导致排队不足时保存。进程在信号未被处理完全之前，可能不会接收到新的信号。SIGIO和SIGURG通常被认为是不可靠信号。</p>
<p>不可靠信号和可靠信号的区别在于前者不支持排队，可能会造成信号丢失，而后者不会。非可靠信号一般都有确定的用途及含义，可靠信号则可以让用户自定义使用。</p>
</li>
</ul>
</blockquote>
<span id="more"></span>

<p><strong>试验：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SIGINT信号处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nReceived SIGINT. Processing and saving critical information...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟处理过程</span></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Critical information processed and saved.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注册SIGINT信号处理函数</span></span><br><span class="line">    signal(SIGINT, signal_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟程序的主要逻辑</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里添加程序的主要逻辑</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Working...\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/1.png"></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> target_process_id;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">alarm_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGALRM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;A: Sending a SIGALRM signal to process %d...\n&quot;</span>, target_process_id);</span><br><span class="line">        kill(target_process_id, SIGALRM);  <span class="comment">// 发送 SIGALRM 信号给程序 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;B_process_id&gt; &lt;timer_seconds&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target_process_id = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> timer_seconds = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置 SIGALRM 信号处理函数</span></span><br><span class="line">    signal(SIGALRM, alarm_handler);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A: After %d seconds, send a SIGALRM signal myself.\n&quot;</span>, timer_seconds);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器</span></span><br><span class="line">    alarm(timer_seconds);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待定时器触发</span></span><br><span class="line">    pause();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigalrm_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGALRM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;B: Receiving a SIGALRM signal. Exiting...\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行程序 B 的其他操作...</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 SIGALRM 信号处理函数</span></span><br><span class="line">    signal(SIGALRM, sigalrm_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出进程 ID</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B: My process ID is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保持程序 B 持续运行</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/2.png"></p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigquit_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGQUIT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent: Received SIGQUIT signal. Sending signals to children...\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向两个子进程发送信号</span></span><br><span class="line">        kill(<span class="number">0</span>, SIGUSR1);  <span class="comment">// 向同一进程组的所有进程发送 SIGUSR1 信号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigusr1_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGUSR1) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child: Received SIGUSR1 signal. Exiting...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 SIGQUIT 信号处理函数</span></span><br><span class="line">    signal(SIGQUIT, sigquit_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个子进程</span></span><br><span class="line">    <span class="type">pid_t</span> child_pid1 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid1 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error creating child process 1&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid1 == <span class="number">0</span>) &#123;  <span class="comment">// 子进程1</span></span><br><span class="line">        signal(SIGUSR1, sigusr1_handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程1执行的任务</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个子进程</span></span><br><span class="line">    <span class="type">pid_t</span> child_pid2 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error creating child process 2&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid2 == <span class="number">0</span>) &#123;  <span class="comment">// 子进程2</span></span><br><span class="line">        signal(SIGUSR1, sigusr1_handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程2执行的任务</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待子进程退出</span></span><br><span class="line">    <span class="type">int</span> status1, status2;</span><br><span class="line">    waitpid(child_pid1, &amp;status1, <span class="number">0</span>);</span><br><span class="line">    waitpid(child_pid2, &amp;status2, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当收到 SIGQUIT 信号时，会执行到这里</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Parent: Both children have exited. Exiting...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/2.png"></p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PRIMES 1000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[MAX_PRIMES];</span><br><span class="line"><span class="type">int</span> num_primes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= number; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handle_sigint</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGINT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nLast prime found: %d\n&quot;</span>, primes[num_primes - <span class="number">1</span>]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handle_sigquit</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGQUIT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nAll primes found:\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_primes; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, primes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nExiting...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置信号处理函数</span></span><br><span class="line">    signal(SIGINT, handle_sigint);</span><br><span class="line">    signal(SIGQUIT, handle_sigquit);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Searching for primes between 2 and 65535...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">65535</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime(i)) &#123;</span><br><span class="line">            primes[num_primes++] = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印找到的素数</span></span><br><span class="line">            <span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加睡眠函数，使效果明显</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/4.png"></p>
<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayDateTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">time_t</span> currentTime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">localTime</span>;</span></span><br><span class="line"></span><br><span class="line">    currentTime = time(<span class="literal">NULL</span>);</span><br><span class="line">    localTime = localtime(&amp;currentTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 \033 进行颜色设置，\033[0m 恢复默认颜色</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34;47m%04d-%02d-%02d %02d:%02d:%02d\033[0m\n&quot;</span>,</span><br><span class="line">           localTime-&gt;tm_year + <span class="number">1900</span>, localTime-&gt;tm_mon + <span class="number">1</span>, localTime-&gt;tm_mday,</span><br><span class="line">           localTime-&gt;tm_hour, localTime-&gt;tm_min, localTime-&gt;tm_sec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleAlarm</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="comment">// 重置闹钟</span></span><br><span class="line">    alarm(<span class="number">1</span>);</span><br><span class="line">    displayDateTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注册信号处理函数</span></span><br><span class="line">    signal(SIGALRM, handleAlarm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初次触发闹钟</span></span><br><span class="line">    alarm(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 空循环等待信号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/5.png"></p>
]]></content>
      <categories>
        <category>Linux实验</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2023/11/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="实验项目名称：贪婪算法技术的应用"><a href="#实验项目名称：贪婪算法技术的应用" class="headerlink" title="实验项目名称：贪婪算法技术的应用"></a>实验项目名称：贪婪算法技术的应用</h3><h3 id="一、实验任务和要求"><a href="#一、实验任务和要求" class="headerlink" title="一、实验任务和要求"></a>一、实验任务和要求</h3><pre><code>1、问题描述
2、设计问题求解的算法、并进行代码的编写、调试、运行。
3、分析算法的时间复杂度
</code></pre>
<h3 id="二、算法描述"><a href="#二、算法描述" class="headerlink" title="二、算法描述"></a>二、算法描述</h3><p>1）问题描述<br><strong>a</strong>.活动安排问题<br><strong>b</strong>.背包问题</p>
<span id="more"></span>

<p>2）算法描述：<br><strong>a</strong>.活动安排问题：使用贪心算法，先按结束时间排序；第一个活动选择结束时间最早的；再选择开始时间晚于上一个活动的结束时间且结束时间最早的活动，重复该步骤。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体表示活动</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Activity</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照活动结束时间升序排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortByEndTime</span><span class="params">(<span class="keyword">struct</span> Activity arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j].end &gt; arr[j + <span class="number">1</span>].end) &#123;</span><br><span class="line">                <span class="comment">// 交换活动的位置</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">Activity</span> <span class="title">temp</span> =</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印选择的活动</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printActivities</span><span class="params">(<span class="keyword">struct</span> Activity arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Selected Activities:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个活动总是被选中</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%d, %d) &quot;</span>, arr[i].start, arr[i].end);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对剩余活动进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 如果当前活动的开始时间大于或等于前一个活动的结束时间，则选择该活动</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j].start &gt;= arr[i].end) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d, %d) &quot;</span>, arr[j].start, arr[j].end);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 示例活动</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Activity</span> <span class="title">activities</span>[] =</span> &#123;&#123;<span class="number">1</span>, <span class="number">4</span>&#125;, &#123;<span class="number">3</span>, <span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">6</span>&#125;, &#123;<span class="number">5</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">5</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算活动数组的大小</span></span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(activities) / <span class="keyword">sizeof</span>(activities[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按结束时间排序</span></span><br><span class="line">    sortByEndTime(activities, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印选择的活动</span></span><br><span class="line">    printActivities(activities, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>b</strong>.背包问题：贪心算法,先按照价值密度（value&#x2F;weight）降序排序，然后尽可能多地装入背包，分为整个装入和部分装入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体表示物品</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> weight;<span class="comment">//重量</span></span><br><span class="line">	<span class="type">int</span> value;<span class="comment">//价值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照价值密度（value/weight）降序排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortByValueDensity</span><span class="params">(<span class="keyword">struct</span> Item arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="type">double</span> density1 = (<span class="type">double</span>)arr[j].value / arr[j].weight;</span><br><span class="line">			<span class="type">double</span> density2 = (<span class="type">double</span>)arr[j + <span class="number">1</span>].value / arr[j + <span class="number">1</span>].weight;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (density1 &lt; density2) &#123;</span><br><span class="line">				<span class="comment">// 交换物品的位置</span></span><br><span class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">Item</span> <span class="title">temp</span> =</span> arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决分数背包问题</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">fractionalKnapsack</span><span class="params">(<span class="keyword">struct</span> Item arr[], <span class="type">int</span> n, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">	sortByValueDensity(arr, n);</span><br><span class="line">	</span><br><span class="line">	<span class="type">double</span> totalValue = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">int</span> currentWeight = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currentWeight + arr[i].weight &lt;= capacity) &#123;</span><br><span class="line">			<span class="comment">// 将整个物品放入背包</span></span><br><span class="line">			currentWeight += arr[i].weight;</span><br><span class="line">			totalValue += arr[i].value;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 将物品的一部分放入背包</span></span><br><span class="line">			<span class="type">double</span> remainingCapacity = capacity - currentWeight;</span><br><span class="line">			totalValue += (<span class="type">double</span>)arr[i].value / arr[i].weight * remainingCapacity;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> totalValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 示例物品</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Item</span> <span class="title">items</span>[] =</span> &#123;&#123;<span class="number">10</span>, <span class="number">60</span>&#125;, &#123;<span class="number">20</span>, <span class="number">100</span>&#125;, &#123;<span class="number">30</span>, <span class="number">120</span>&#125;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算物品数组的大小</span></span><br><span class="line">	<span class="type">int</span> n = <span class="keyword">sizeof</span>(items) / <span class="keyword">sizeof</span>(items[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 背包容量</span></span><br><span class="line">	<span class="type">int</span> capacity = <span class="number">50</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 解决分数背包问题并输出结果</span></span><br><span class="line">	<span class="type">double</span> maxValue = fractionalKnapsack(items, n, capacity);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Maximum value in Knapsack = %.2lf\n&quot;</span>, maxValue);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、算法时间复杂度分析"><a href="#三、算法时间复杂度分析" class="headerlink" title="三、算法时间复杂度分析"></a>三、算法时间复杂度分析</h3><p><strong>a</strong>.按结束时间排序函数的时间复杂度为O(n^2^),打印选择活动函数的时间复杂度为O(n),故该算法时间复杂度为O(n^2^)。<br><strong>b</strong>.按照价值密度（value&#x2F;weight）降序排序函数的时间复杂度为 O(n^2^)，解决分数背包问题函数的时间复杂度为O(n),故该算法时间复杂度为O(n^2^)。</p>
<h3 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="/images/algorithm/greedy/1.png"><br><img src="/images/algorithm/greedy/2.png"></p>
<h3 id="五、实验心得"><a href="#五、实验心得" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><blockquote>
<p>贪心算法每次的选择都是基于当前情况下的最优决策。它满足最优子结构的问题，即一个问题的最优解可以通过子问题的最优解来构建。贪心算法不一定能够得到全局最优解，但能够得到局部最优解。简单来说，贪心算法采取局部最优的决策，希望通过每个局部最优解的选择，最终得到全局的最优解。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>实验9</title>
    <url>/2023/11/29/%E5%AE%9E%E9%AA%8C9/</url>
    <content><![CDATA[<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><blockquote>
<p>​	操作系统中进程通信的作用是允许不同的进程之间交换信息和共享资源，以实现协同工作和数据共享。这有助于多任务处理和分布式系统的有效管理。进程通信可通过各种机制实现，包括共享内存、消息传递、管道等。通过进程通信，不同的进程可以协调完成任务、共享数据，提高系统的整体效率。</p>
</blockquote>
<hr>
<span id="more"></span>

<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>进程间通信有多种方式，其中一些主要的方式包括：</p>
<ol>
<li>管道（Pipes）：单向通信，通常用于具有亲缘关系的父子进程间的通信。</li>
<li>消息队列（Message Queues）：允许通过消息进行双向通信，消息被放入队列，其他进程可以读取队列中的消息。</li>
<li>信号（Signals）：用于通知进程发生了特定事件，例如中断或错误。信号机制比较简单，但不能传递大量数据。</li>
<li>共享内存（Shared Memory）：允许多个进程直接访问同一块物理内存，效率较高。需要进行同步以避免冲突。</li>
<li>套接字（Sockets）：提供了网络通信的一种方式，也可用于本地进程通信。适用于不同计算机或同一计算机上的进程。</li>
<li>信号量（Semaphores）：用于进程间同步和互斥，确保在共享资源上的互斥访问。</li>
</ol>
<blockquote>
<p>每种通信方式都有其适用的场景和特点，选择通信方式通常取决于进程间需要传递的数据量、通信的频率、同步需求等因素。</p>
</blockquote>
<hr>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p><strong>1.</strong>  <strong>fd1 &#x3D; open(“a.txt”, O_RDONLY);</strong></p>
<p>打开文件”a.txt”以只读方式，fd1将被赋予相应的文件描述符值。</p>
<p><strong>2.</strong>  <strong>fd2 &#x3D; open(“b.txt”, O_WRONLY);</strong></p>
<p>打开文件”b.txt”以只写方式，fd2将被赋予相应的文件描述符值。</p>
<p><strong>3.</strong>  <strong>fd3 &#x3D; dup(fd1);</strong></p>
<p>使用dup复制fd1，返回一个新的文件描述符，该描述符是尚未使用的最小值。fd3将获得这个新的文件描述符。</p>
<p><strong>4.</strong>  <strong>fd4 &#x3D; dup2(fd2, 0);</strong></p>
<p>使用dup2复制fd2到0（标准输入），并返回0。fd4将获得这个新的文件描述符。</p>
<p>假设当前终端没有打开任何正常文件，那么：</p>
<ol>
<li><strong>fd1</strong>： 打开”a.txt”，因此其值为 a.txt 的文件描述符。</li>
<li><strong>fd2</strong>： 打开”b.txt”，因此其值为 b.txt 的文件描述符。</li>
<li><strong>fd3</strong>： 使用dup复制fd1，返回的是尚未使用的最小文件描述符，因此 fd3 为 a.txt 的文件描述符。</li>
<li><strong>fd4</strong>： 使用dup2将fd2复制到0（标准输入），返回的是指定的文件描述符，因此 fd4 为 b.txt 的文件描述符。</li>
</ol>
<hr>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//printf</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span> <span class="comment">//open</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span> <span class="comment">//dup fflush close</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">// 打开文件c.txt以只写方式</span></span><br><span class="line">	<span class="type">int</span> file_fd = open(<span class="string">&quot;c.txt&quot;</span>,O_WRONLY|O_CREAT|O_TRUNC,<span class="number">0644</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 备份标准输出文件描述符</span></span><br><span class="line">	<span class="type">int</span> stdout_backup = dup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将标准输出重定向到文件c.txt</span></span><br><span class="line">	dup2(file_fd,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 第一次输出到文件c.txt</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello Linux\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 刷新打开的流</span></span><br><span class="line">	fflush(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 还原标准输出,文件标识符1给stdout_backup，1不再指向file_fd,即还原了</span></span><br><span class="line">	dup2(stdout_backup,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 第二次输出到屏幕上</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello Linux\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 刷新打开的流</span></span><br><span class="line">	fflush(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭文件描述符</span></span><br><span class="line">	close(file_fd);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个程序首先打开文件”c.txt”，然后使用dup2将标准输出重定向到该文件。接着执行printf语句，将输出写入文件。之后，通过dup2将标准输出还原到原来的文件描述符，再次执行printf语句，将输出显示在屏幕上。最后，关闭文件描述符。</p>
</blockquote>
<p>在使用 dup 或 dup2 函数进行文件描述符复制时，还原标准输出指的是将原来的标准输出（文件描述符1）恢复到其先前的状态。在涉及重定向标准输出的操作中，程序可能会将标准输出指向其他文件描述符，比如一个文件或管道。为了确保程序后续的输出会回到标准输出，需要在适当的时候还原标准输出。</p>
<p>举例来说，在之前的一个回答中，有这样一段代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> stdout_backup = dup(<span class="number">1</span>);   <span class="comment">// 备份标准输出文件描述符</span></span><br><span class="line">dup2(file_fd, <span class="number">1</span>);             <span class="comment">// 将标准输出重定向到文件c.txt</span></span><br><span class="line"><span class="comment">// ... 执行一些操作，比如printf</span></span><br><span class="line">dup2(stdout_backup, <span class="number">1</span>);       <span class="comment">// 还原标准输出</span></span><br></pre></td></tr></table></figure>

<p>这里，stdout_backup &#x3D; dup(1) 备份了标准输出的文件描述符，然后 dup2(file_fd, 1) 将标准输出重定向到文件。之后，通过 dup2(stdout_backup, 1) 将标准输出还原到之前备份的文件描述符，以确保后续的输出会回到标准输出。这个还原操作是为了维持程序的输出正常流程。 </p>
<p><strong>这里，dup(1)创建了标准输出文件描述符的副本，并将其存储在stdout_backup中。稍后，如果标准输出被重定向（例如，使用dup2将其指向一个文件），dup2(stdout_backup, 1)通过将备份的文件描述符复制回标准输出来进行还原。</strong></p>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/1.png"></p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//perror</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span> <span class="comment">//exit fork close</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> <span class="comment">//strlen</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">// 创建管道</span></span><br><span class="line">	<span class="type">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">if</span>(pipe(pipe_fd) == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">&quot;Pipe creation falied&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建子进程</span></span><br><span class="line">	<span class="type">pid_t</span> child_pid = fork();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(child_pid == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">&quot;Fork failed&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(child_pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 父进程</span></span><br><span class="line">		<span class="comment">//close(pipe_fd[0]);// 关闭读取端</span></span><br><span class="line">		<span class="type">char</span> message[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Parent sends:%s\n&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将字符串写入管道</span></span><br><span class="line">		write(pipe_fd[<span class="number">1</span>],message,<span class="built_in">strlen</span>(message) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 等待子进程结束</span></span><br><span class="line">		wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取子进程传回的消息</span></span><br><span class="line">		<span class="type">char</span> reversed_message[BUFFER_SIZE];</span><br><span class="line">		read(pipe_fd[<span class="number">0</span>],reversed_message,<span class="keyword">sizeof</span>(reversed_message));</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Parent receives:%s\n&quot;</span>,reversed_message);</span><br><span class="line"></span><br><span class="line">		close(pipe_fd[<span class="number">1</span>]); <span class="comment">// 关闭写入端</span></span><br><span class="line">		close(pipe_fd[<span class="number">0</span>]); <span class="comment">// 关闭读取端</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 子进程</span></span><br><span class="line">		<span class="comment">//close(pipe_fd[1]);// 关闭写入端</span></span><br><span class="line">		<span class="type">char</span> received_message[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 从管道中读取父进程发送的消息</span></span><br><span class="line">		read(pipe_fd[<span class="number">0</span>],received_message,<span class="keyword">sizeof</span>(received_message));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Child receives:%s\n&quot;</span>,received_message);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将字符串倒序</span></span><br><span class="line">		<span class="type">int</span> length = <span class="built_in">strlen</span>(received_message);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">			<span class="type">char</span> temp = received_message[i];</span><br><span class="line">			received_message[i] = received_message[length-i<span class="number">-1</span>];</span><br><span class="line">			received_message[length-i<span class="number">-1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 在倒序字符串后附加子进程号</span></span><br><span class="line">		<span class="type">pid_t</span> child_pid = getpid();</span><br><span class="line">		<span class="built_in">snprintf</span>(received_message + length, BUFFER_SIZE - length, <span class="string">&quot;%d&quot;</span>, child_pid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将处理后的消息写回管道</span></span><br><span class="line">	        write(pipe_fd[<span class="number">1</span>], received_message, <span class="built_in">strlen</span>(received_message) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		close(pipe_fd[<span class="number">0</span>]); <span class="comment">// 关闭读取端</span></span><br><span class="line">		close(pipe_fd[<span class="number">1</span>]); <span class="comment">// 关闭写入端</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>父子进程不能关闭写入端和读取端，否则父进程无法接收子进程的字符串</p>
</blockquote>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/2.png"></p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><blockquote>
<p>思路：进程1–&gt;pipe_ps_grep–&gt;进程2–&gt;pipe_grep_wc-&gt;进程3</p>
</blockquote>
<p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> pipe_ps_grep[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> pipe_grep_wc[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个管道</span></span><br><span class="line">    <span class="keyword">if</span> (pipe(pipe_ps_grep) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe_ps_grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> ps_child_pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个子进程执行 ps -uax</span></span><br><span class="line">    <span class="keyword">if</span> ((ps_child_pid = fork()) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork_ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ps_child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*使用STDOUT_FILENO文件描述符指向pipe_ps_grep[1]：写管道，一般情况下对应的文件描述符是4，</span></span><br><span class="line"><span class="comment">        需要关闭原文件描述符*/</span></span><br><span class="line">        dup2(pipe_ps_grep[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">        <span class="comment">//关闭原文件描述符</span></span><br><span class="line">        close(pipe_ps_grep[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_ps_grep[<span class="number">1</span>]);</span><br><span class="line">        execlp(<span class="string">&quot;ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;-uax&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execlp_ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个管道</span></span><br><span class="line">    <span class="keyword">if</span> (pipe(pipe_grep_wc) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe_grep_wc&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> grep_child_pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个子进程执行 grep root</span></span><br><span class="line">    <span class="keyword">if</span> ((grep_child_pid = fork()) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork_grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (grep_child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">     	<span class="comment">//读pipe_ps_grep[0]端</span></span><br><span class="line">        dup2(pipe_ps_grep[<span class="number">0</span>], STDIN_FILENO);</span><br><span class="line">        close(pipe_ps_grep[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_ps_grep[<span class="number">1</span>]);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//写pipe_grep_wc[1]端</span></span><br><span class="line">        dup2(pipe_grep_wc[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        execlp(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;grep&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execlp_grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭第一个管道在父进程中未使用的部分</span></span><br><span class="line">    close(pipe_ps_grep[<span class="number">0</span>]);</span><br><span class="line">    close(pipe_ps_grep[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第三个子进程执行 wc -l</span></span><br><span class="line">    <span class="type">pid_t</span> wc_child_pid;</span><br><span class="line">    <span class="keyword">if</span> ((wc_child_pid = fork()) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork_wc&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wc_child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//读pipe_grep_wc[1]端</span></span><br><span class="line">        dup2(pipe_grep_wc[<span class="number">0</span>], STDIN_FILENO);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        execlp(<span class="string">&quot;wc&quot;</span>, <span class="string">&quot;wc&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execlp_wc&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭第二个管道在父进程中未使用的部分</span></span><br><span class="line">    close(pipe_grep_wc[<span class="number">0</span>]);</span><br><span class="line">    close(pipe_grep_wc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待所有子进程结束</span></span><br><span class="line">    waitpid(ps_child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    waitpid(grep_child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    waitpid(wc_child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>execlp</code>是一个在Unix&#x2F;Linux系统中用于执行可执行文件的系统调用。它会取代当前进程的内存映像，加载并执行指定的可执行文件。</p>
<p>具体来说，<code>execlp</code>函数的作用是在调用进程中执行一个新的程序。它接受可执行文件的路径，以及一系列的命令行参数，最后一个参数必须是NULL，用于表示参数列表的结束。</p>
<p>在上述C程序的例子中，<code>execlp(&quot;ps&quot;, &quot;ps&quot;, &quot;-uax&quot;, NULL)</code>用于执行<code>ps -uax</code>命令，而<code>execlp(&quot;grep&quot;, &quot;grep&quot;, &quot;root&quot;, NULL)</code>用于执行<code>grep root</code>命令。这两个函数调用使得子进程加载并执行了这两个命令，替代了原有的进程内存映像。</p>
</blockquote>
<p>这是一个使用C语言编写的程序，通过无名管道、fork函数和exec函数实现了模拟命令<code>ps -uax | grep root | wc -l</code>的功能。下面是对程序的解释：</p>
<ol>
<li><p><strong>管道的创建：</strong><br><code>pipe(pipe_ps_grep)</code>: 创建了一个管道，用于连接<code>ps</code>进程和<code>grep</code>进程。</p>
<p>  <code>pipe(pipe_grep_wc)</code>: 创建了另一个管道，用于连接<code>grep</code>进程和<code>wc</code>进程。</p>
</li>
<li><p><strong>ps进程的创建：</strong></p>
<p><code>ps_child_pid = fork()</code>: 创建了第一个子进程，该子进程执行<code>ps -uax</code>命令。</p>
<p>在子进程中，使用<code>dup2</code>将<code>ps</code>的标准输出连接到<code>pipe_ps_grep</code>的写入端口，并通过<code>execlp</code>执行<code>ps</code>命令。</p>
</li>
<li><p><strong>grep进程的创建：</strong></p>
<p><code>grep_child_pid = fork()</code>: 创建了第二个子进程，该子进程执行<code>grep root</code>命令。</p>
<p>在子进程中，使用<code>dup2</code>将<code>ps</code>的标准输出连接到<code>pipe_ps_grep</code>的读取端口，将<code>grep</code>的标准输出连接到<code>pipe_grep_wc</code>的写入端口，并通过<code>execlp</code>执行<code>grep</code>命令。</p>
</li>
<li><p><strong>wc进程的创建：</strong></p>
<p><code>wc_child_pid = fork()</code>: 创建了第三个子进程，该子进程执行<code>wc -l</code>命令。</p>
<p>在子进程中，使用<code>dup2</code>将<code>grep</code>的标准输出连接到<code>pipe_grep_wc</code>的读取端口，并通过<code>execlp</code>执行<code>wc</code>命令。</p>
</li>
<li><p><strong>管道的关闭：</strong></p>
<p>父进程关闭了在子进程中未使用的管道部分。</p>
<blockquote>
<p><code>dup2</code>函数用于复制文件描述符，将一个文件描述符指向另一个文件描述符。当你使用<code>dup2</code>将某个文件描述符指向一个管道的端口时，通常需要关闭原始的文件描述符，因为它已经被复制到了新的文件描述符。</p>
<p>在管道的使用场景中，<code>dup2</code>的典型用法是将标准输入或标准输出重定向到管道的读取端或写入端。一旦重定向完成，原始的标准输入或标准输出就变得多余了，因此可以关闭它。</p>
</blockquote>
</li>
<li><p><strong>等待子进程结束：</strong></p>
<p>使用<code>waitpid</code>函数等待所有子进程执行完毕。</p>
</li>
</ol>
<p>​	这样，通过使用管道连接多个子进程，实现了<code>ps -uax | grep root | wc -l</code>命令的功能。父进程负责创建子进程，并确保正确的管道连接。</p>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/3.png"></p>
<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//打开一个管道（只读），并执行ps -uax</span></span><br><span class="line">    FILE *pipe_ps = popen(<span class="string">&quot;ps -uax&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pipe_ps == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;popen ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开一个管道（只写），并执行ps -uax</span></span><br><span class="line">    FILE *pipe_grep = popen(<span class="string">&quot;grep root&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pipe_grep == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;popen grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">size_t</span> bytesRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从ps的输出读取数据并写入到grep</span></span><br><span class="line">    <span class="keyword">while</span> ((bytesRead = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), pipe_ps)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fwrite(buffer, <span class="number">1</span>, bytesRead, pipe_grep);</span><br><span class="line">        <span class="comment">//size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);</span></span><br><span class="line">        <span class="comment">//size_t fread( void *buffer, size_t size, size_t count, FILE *stream );</span></span><br><span class="line">        <span class="comment">//size--这是要被写入的每个元素的大小，以字节为单位。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭管道</span></span><br><span class="line">    <span class="keyword">if</span> (pclose(pipe_ps) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pclose ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pclose(pipe_grep) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pclose grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个程序使用两个popen调用分别执行ps -uax和grep root，并将它们通过管道连接起来。然后，通过fread和fwrite从ps的输出读取数据并写入到grep的输入。最后，使用pclose关闭两个管道。</p>
<p>这样，你就完成了模拟ps -uax | grep root的操作，而无需手动创建管道和子进程</p>
</blockquote>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/4.png"></p>
<p><code>popen</code>是一个C标准库函数，用于在一个新的进程中打开一个管道并执行一个 shell 命令。它返回一个文件指针，可以用于读取或写入与子进程关联的管道。</p>
<p>函数签名如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">popen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command, <span class="type">const</span> <span class="type">char</span> *type)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>command</code> 参数是要执行的 shell 命令字符串。</li>
<li><code>type</code> 参数是一个字符串，用于指定打开管道的方式。常用的值包括 <code>&quot;r&quot;</code>（只读）和 <code>&quot;w&quot;</code>（只写）。</li>
</ul>
<p>返回值是一个文件指针，可以使用标准文件操作函数（如 <code>fread</code>、<code>fwrite</code>、<code>fclose</code> 等）来读取或写入与子进程关联的管道。</p>
<p>例如，<code>popen(&quot;ps -uax&quot;, &quot;r&quot;)</code> 会执行 <code>ps -uax</code> 命令，并返回一个文件指针，可以用于读取该命令的标准输出。</p>
<p><code>pclose</code> 用于关闭由 <code>popen</code> 打开的管道，并等待相关的子进程结束。它的函数签名如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>stream</code> 是 <code>popen</code> 返回的文件指针。</li>
</ul>
<p>返回值是子进程的终止状态，或者 -1 表示有错误发生。</p>
<p>请注意，<code>popen</code> 和 <code>pclose</code> 在处理大量数据时可能存在一些限制，因为它们依赖于标准I&#x2F;O缓冲区。如果你需要更灵活的控制，或者处理大量数据，可能需要使用其他机制，比如<code>fork</code>和<code>pipe</code>。</p>
]]></content>
      <categories>
        <category>Linux实验</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
