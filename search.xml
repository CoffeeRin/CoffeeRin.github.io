<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2023/11/05/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><i>markdown:通用html标签</i></p>
<p>标签后要加空格</p>
<p><u>块级元素：至少独占一行</u><br><u>行内元素：只占据自身所需空间</u></p>
<hr>

<p># 标题1<br>## 标题2<br>### 标题3</p>
<h1 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h1><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><hr>

<span id="more"></span>

<p>&gt;引用</p>
<h1 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h1><blockquote>
<p>引用</p>
</blockquote>
<hr>

<p>有序列表:<br>1. a<br>2. b<br>3. c</p>
<p>无序列表：<br>- A<br>- B<br>- C</p>
<p>任务列表：<br>- [ ] a<br>- [ ] b<br>- [x] c</p>
<h1 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h1><p>有序列表:</p>
<ol>
<li>a</li>
<li>b</li>
<li>c</li>
</ol>
<p>无序列表：</p>
<ul>
<li>A</li>
<li>B</li>
<li>C</li>
</ul>
<p>任务列表：</p>
<ul>
<li><input disabled="" type="checkbox"> a</li>
<li><input disabled="" type="checkbox"> b</li>
<li><input checked="" disabled="" type="checkbox"> c</li>
</ul>
<hr>

<p>代码块：<br>``` c(此处c表示代码是C语言)<br>int main():<br>{<br>    printf(“Hello world”);<br>}<br>```<br>行内代码:<br>`&#96; printf(Hello wold!)&#96;&#96;;</p>
<h1 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h1><p>代码块：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>行内代码:<br><code> printf(Hello wold!)</code>;</p>
<hr>

<p>数学公式：有美元符号$才能识别lateX</p>
<p>$$<br>\frac{\partial f}{\partial x} = 2\sqrt{a}x<br>$$</p>
<p>行内数学公式：<br>$\theta &#x3D; x^2$</p>
<h1 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h1><p>数学公式：有美元符号$才能识别lateX<br>$$<br>\frac{\partial f}{\partial x} &#x3D; 2\sqrt{a}x<br>$$</p>
<p>行内数学公式：<br>$\theta &#x3D; x^2$</p>
<hr>

<p>表格：“:”决定居中居左具右<br>| 姓名 | 年龄 | 成绩 |<br>| :— | —: | :—: |<br>| 张三 | 22 | 92 |</p>
<h1 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h1><p>表格：“:”决定居中居左具右</p>
<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="right">年龄</th>
<th align="center">成绩</th>
</tr>
</thead>
<tbody><tr>
<td align="left">张三</td>
<td align="right">22</td>
<td align="center">92</td>
</tr>
</tbody></table>
<hr>

<p>脚注：<br>脚注[^脚注]<br>[^脚注]:脚注</p>
<h1 id="效果：-6"><a href="#效果：-6" class="headerlink" title="效果："></a>效果：</h1><p>脚注[^脚注]<br>[^脚注]:脚注</p>
<hr>

<p>横线：</p>
<p>- - -或***或_ _ _</p>
<h1 id="效果：第一条虚线"><a href="#效果：第一条虚线" class="headerlink" title="效果：第一条虚线"></a>效果：第一条虚线</h1><hr>
<hr>

<p>链接：<br>[百度](baidu.com “一个搜索引擎”)<br>例子：给标题设置链接<br>请参考[标题1](#标题1)</p>
<p>引用链接：引用需要回车<br>[百度][id],[百度][id],[百度][id]</p>
<p>[id]: baidu.com &quot;一个搜索引擎”</p>
<p>URL:输入网页链接格式，自动识别<br>https:&#x2F;&#x2F;<a href="http://www.baidu.com/">www.baidu.com</a></p>
<h1 id="效果：-7"><a href="#效果：-7" class="headerlink" title="效果："></a>效果：</h1><p>链接：<br><a href="baidu.com" title="一个搜索引擎">百度</a><br>例子：给标题设置链接<br>请参考<a href="#%E6%A0%87%E9%A2%981">标题1</a></p>
<p>引用链接：引用需要回车<br><a href="baidu.com" title="一个搜索引擎">百度</a>,<a href="baidu.com" title="一个搜索引擎">百度</a>,<a href="baidu.com" title="一个搜索引擎">百度</a></p>
<p>URL:输入网页链接格式，自动识别<br><a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<hr>

<p>图片：相对地址、绝对地址、网址链接</p>
<p>![百度](https:&#x2F;&#x2F;pss.bdstatic.com&#x2F;static&#x2F;superman&#x2F;img&#x2F;logo&#x2F;logo_white-d0c9fe2af5.png “百度LOGO”)</p>
<h1 id="效果：-8"><a href="#效果：-8" class="headerlink" title="效果："></a>效果：</h1><p><img src="https://pss.bdstatic.com/static/superman/img/logo/logo_white-d0c9fe2af5.png" alt="百度" title="百度LOGO"></p>
<hr>

<p>*斜体*</p>
<p>**加粗**</p>
<p>&gt;引用</p>
<p>~~删除线~~</p>
<p>&lt;u&gt;下划线&lt;&#x2F;u&gt;</p>
<p>高亮：=&#x3D;高亮&#x3D;&#x3D;</p>
<p>下标：H~2~O</p>
<p>上标：X^2^</p>
<p>表情符号：:smile:<br><br></p>
<h1 id="效果：-9"><a href="#效果：-9" class="headerlink" title="效果："></a>效果：</h1><p><em>斜体</em></p>
<p><strong>加粗</strong></p>
<blockquote>
<p>引用</p>
</blockquote>
<p><del>删除线</del></p>
<p><u>下划线</u></p>
<p>高亮：&#x3D;&#x3D;高亮&#x3D;&#x3D;</p>
<p>下标：H<del>2</del>O</p>
<p>上标：X^2^</p>
<p>表情符号：:smile:</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/11/06/Linux/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><p>父子进程不共享变量，子进程和父进程分别执行程序</p>
</li>
<li><p>创建子进程（父子进程程序相同，进程号不同）并执行时，父子进程分别为2个程序，同时执行各自程序</p>
</li>
<li><p>线程共享</p>
</li>
<li><p>terminal运行.&#x2F;a.out &amp;，’&amp;’表示后台运行    <a href="https://blog.csdn.net/z19861216/article/details/130848954">相关链接</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/05/HelloWorld/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>实验8</title>
    <url>/2023/11/27/%E5%AE%9E%E9%AA%8C8/</url>
    <content><![CDATA[<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><blockquote>
<ul>
<li><p><strong>可靠信号</strong>（Reliable Signals）： 这种信号在发送时不会丢失，系统会确保信号最终被接收。当进程处于阻塞状态时，可靠信号会被排队，直到进程解除阻塞后才被传递。SIGINT通常被认为是可靠信号。</p>
</li>
<li><p><strong>不可靠信号</strong>（Unreliable Signals）： 这种信号可能在发送时丢失，而且不会在信号过多导致排队不足时保存。进程在信号未被处理完全之前，可能不会接收到新的信号。SIGIO和SIGURG通常被认为是不可靠信号。</p>
<p>不可靠信号和可靠信号的区别在于前者不支持排队，可能会造成信号丢失，而后者不会。非可靠信号一般都有确定的用途及含义，可靠信号则可以让用户自定义使用。</p>
</li>
</ul>
</blockquote>
<span id="more"></span>

<p><strong>试验：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SIGINT信号处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nReceived SIGINT. Processing and saving critical information...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟处理过程</span></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Critical information processed and saved.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注册SIGINT信号处理函数</span></span><br><span class="line">    signal(SIGINT, signal_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟程序的主要逻辑</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里添加程序的主要逻辑</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Working...\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/1.png"></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> target_process_id;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">alarm_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGALRM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;A: Sending a SIGALRM signal to process %d...\n&quot;</span>, target_process_id);</span><br><span class="line">        kill(target_process_id, SIGALRM);  <span class="comment">// 发送 SIGALRM 信号给程序 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;B_process_id&gt; &lt;timer_seconds&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target_process_id = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> timer_seconds = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置 SIGALRM 信号处理函数</span></span><br><span class="line">    signal(SIGALRM, alarm_handler);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A: After %d seconds, send a SIGALRM signal myself.\n&quot;</span>, timer_seconds);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器</span></span><br><span class="line">    alarm(timer_seconds);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待定时器触发</span></span><br><span class="line">    pause();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigalrm_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGALRM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;B: Receiving a SIGALRM signal. Exiting...\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行程序 B 的其他操作...</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 SIGALRM 信号处理函数</span></span><br><span class="line">    signal(SIGALRM, sigalrm_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出进程 ID</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B: My process ID is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保持程序 B 持续运行</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>结果：</strong></p>
<blockquote>
<p>‘&amp;’表后台运行</p>
</blockquote>
<p><img src="/images/Linux_pic/sy8/2.png"></p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigquit_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGQUIT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent: Received SIGQUIT signal. Sending signals to children...\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向两个子进程发送信号</span></span><br><span class="line">        kill(<span class="number">0</span>, SIGUSR1);  <span class="comment">// 向同一进程组的所有进程发送 SIGUSR1 信号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigusr1_handler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGUSR1) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child: Received SIGUSR1 signal. Exiting...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 SIGQUIT 信号处理函数</span></span><br><span class="line">    signal(SIGQUIT, sigquit_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个子进程</span></span><br><span class="line">    <span class="type">pid_t</span> child_pid1 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid1 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error creating child process 1&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid1 == <span class="number">0</span>) &#123;  <span class="comment">// 子进程1</span></span><br><span class="line">        signal(SIGUSR1, sigusr1_handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程1执行的任务</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个子进程</span></span><br><span class="line">    <span class="type">pid_t</span> child_pid2 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error creating child process 2&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child_pid2 == <span class="number">0</span>) &#123;  <span class="comment">// 子进程2</span></span><br><span class="line">        signal(SIGUSR1, sigusr1_handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程2执行的任务</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待子进程退出</span></span><br><span class="line">    <span class="type">int</span> status1, status2;</span><br><span class="line">    waitpid(child_pid1, &amp;status1, <span class="number">0</span>);</span><br><span class="line">    waitpid(child_pid2, &amp;status2, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当收到 SIGQUIT 信号时，会执行到这里</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Parent: Both children have exited. Exiting...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/3.png"></p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PRIMES 1000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[MAX_PRIMES];</span><br><span class="line"><span class="type">int</span> num_primes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= number; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handle_sigint</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGINT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nLast prime found: %d\n&quot;</span>, primes[num_primes - <span class="number">1</span>]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handle_sigquit</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (signum == SIGQUIT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nAll primes found:\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_primes; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, primes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nExiting...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置信号处理函数</span></span><br><span class="line">    signal(SIGINT, handle_sigint);</span><br><span class="line">    signal(SIGQUIT, handle_sigquit);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Searching for primes between 2 and 65535...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">65535</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime(i)) &#123;</span><br><span class="line">            primes[num_primes++] = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印找到的素数</span></span><br><span class="line">            <span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加睡眠函数，使效果明显</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/4.png"></p>
<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayDateTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">time_t</span> currentTime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">localTime</span>;</span></span><br><span class="line"></span><br><span class="line">    currentTime = time(<span class="literal">NULL</span>);</span><br><span class="line">    localTime = localtime(&amp;currentTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 \033 进行颜色设置，\033[0m 恢复默认颜色</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34;47m%04d-%02d-%02d %02d:%02d:%02d\033[0m\n&quot;</span>,</span><br><span class="line">           localTime-&gt;tm_year + <span class="number">1900</span>, localTime-&gt;tm_mon + <span class="number">1</span>, localTime-&gt;tm_mday,</span><br><span class="line">           localTime-&gt;tm_hour, localTime-&gt;tm_min, localTime-&gt;tm_sec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleAlarm</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    <span class="comment">// 重置闹钟</span></span><br><span class="line">    alarm(<span class="number">1</span>);</span><br><span class="line">    displayDateTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注册信号处理函数</span></span><br><span class="line">    signal(SIGALRM, handleAlarm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初次触发闹钟</span></span><br><span class="line">    alarm(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 空循环等待信号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy8/5.png"></p>
<p><em>参考例子：</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//digital_clock.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">alarm_handler</span><span class="params">(<span class="type">int</span> signo)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(signo == SIGALRM)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="type">char</span> date_str[<span class="number">100</span>];</span><br><span class="line">                <span class="type">char</span> time_str[<span class="number">100</span>];</span><br><span class="line">                <span class="type">time_t</span> t=time(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tp</span>=</span>localtime(&amp;t);</span><br><span class="line">                strftime(date_str, <span class="keyword">sizeof</span>(date_str),<span class="string">&quot;%Y-%m-%d&quot;</span>, tp);</span><br><span class="line">                strftime(time_str, <span class="keyword">sizeof</span>(time_str),<span class="string">&quot;%H:%M:%S&quot;</span>, tp);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\033c&quot;</span>); <span class="comment">//清屏命令</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;        \033[35;47m%s\033[0m  &quot;</span>, date_str);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\033[31;43m%s\033[0m\n&quot;</span>, time_str);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_time</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>( signal(SIGALRM, alarm_handler) == SIG_ERR  )</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;signal SIGALAM error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        alarm(<span class="number">1</span>);</span><br><span class="line">        pause(); <span class="comment">//等待定时器触发完成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                show_time();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>time_t t = time(NULL);</code></li>
</ol>
<p>这行代码使用 <code>time</code> 函数获取当前时间，并将其表示为一个从 1970 年 1 月 1 日（UNIX 时代开始）到现在的秒数，这个值被存储在 <code>time_t</code> 类型的变量 <code>t</code> 中。<code>time(NULL)</code> 是一种常见的写法，表示获取当前时间。</p>
<ol start="2">
<li><code>struct tm *tp = localtime(&amp;t);</code></li>
</ol>
<p>这行代码使用 <code>localtime</code> 函数将上述获取的当前时间（以秒数为单位）转换为一个 <code>struct tm</code> 结构体，这个结构体描述了日期和时间的各个部分（例如年、月、日、时、分和秒）。<code>localtime</code> 函数返回一个指向这个结构体的指针，该指针被存储在 <code>struct tm</code> 类型的指针变量 <code>tp</code> 中。</p>
<p>通过这两行代码，你得到了一个 <code>structtm</code> 类型的结构体指针 <code>tp</code>，它可以让你访问和操作当前的日期和时间。例如，你可以使用 <code>tp-&gt;tm_year</code> 来获取当前的年份，使用 <code>tp-&gt;tm_mday</code> 来获取当前的月份等等。</p>
</blockquote>
<p><img src="/images/Linux_pic/sy8/6.png"></p>
]]></content>
      <categories>
        <category>Linux实验</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2023/11/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="实验项目名称：贪婪算法技术的应用"><a href="#实验项目名称：贪婪算法技术的应用" class="headerlink" title="实验项目名称：贪婪算法技术的应用"></a>实验项目名称：贪婪算法技术的应用</h3><h3 id="一、实验任务和要求"><a href="#一、实验任务和要求" class="headerlink" title="一、实验任务和要求"></a>一、实验任务和要求</h3><blockquote>
<p>1、问题描述<br>2、设计问题求解的算法、并进行代码的编写、调试、运行。<br>3、分析算法的时间复杂度</p>
</blockquote>
<h3 id="二、算法描述"><a href="#二、算法描述" class="headerlink" title="二、算法描述"></a>二、算法描述</h3><p>1）问题描述<br><strong>a</strong>.活动安排问题<br><strong>b</strong>.背包问题</p>
<span id="more"></span>

<p>2）算法描述：<br><strong>a</strong>.活动安排问题：使用贪心算法，先按结束时间排序；第一个活动选择结束时间最早的；再选择开始时间晚于上一个活动的结束时间且结束时间最早的活动，重复该步骤。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体表示活动</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Activity</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="type">int</span> no; <span class="comment">//活动号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照活动结束时间升序排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortByEndTime</span><span class="params">(<span class="keyword">struct</span> Activity arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j].end &gt; arr[j + <span class="number">1</span>].end) &#123;</span><br><span class="line">                <span class="comment">// 交换活动的位置</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">Activity</span> <span class="title">temp</span> =</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印选择的活动</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printActivities</span><span class="params">(<span class="keyword">struct</span> Activity arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    sortByEndTime(arr,n); <span class="comment">// 按照活动结束时间升序排序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Selected Activities:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个活动总是被选中</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//记录上一个被选中的活动</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%d, %d) &quot;</span>, arr[i].start, arr[i].end);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对剩余活动进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 如果当前活动的开始时间大于或等于前一个活动的结束时间，则选择该活动</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j].start &gt;= arr[i].end) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d, %d) &quot;</span>, arr[j].start, arr[j].end);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 示例活动</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Activity</span> <span class="title">activities</span>[] =</span> &#123;&#123;<span class="number">1</span>, <span class="number">4</span>&#125;, &#123;<span class="number">3</span>, <span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">6</span>&#125;, &#123;<span class="number">5</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">5</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算活动数组的大小</span></span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(activities) / <span class="keyword">sizeof</span>(activities[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印选择的活动</span></span><br><span class="line">    printActivities(activities, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>b</strong>.背包问题：贪心算法,先按照价值密度（value&#x2F;weight）降序排序，然后尽可能多地装入背包，分为整个装入和部分装入。0-1也按性价比排序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体表示物品</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> weight;<span class="comment">//重量</span></span><br><span class="line">	<span class="type">int</span> value;<span class="comment">//价值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照价值密度（value/weight）降序排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortByValueDensity</span><span class="params">(<span class="keyword">struct</span> Item arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="type">double</span> density1 = (<span class="type">double</span>)arr[j].value / arr[j].weight;</span><br><span class="line">			<span class="type">double</span> density2 = (<span class="type">double</span>)arr[j + <span class="number">1</span>].value / arr[j + <span class="number">1</span>].weight;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (density1 &lt; density2) &#123;</span><br><span class="line">				<span class="comment">// 交换物品的位置</span></span><br><span class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">Item</span> <span class="title">temp</span> =</span> arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决分数背包问题</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">fractionalKnapsack</span><span class="params">(<span class="keyword">struct</span> Item arr[], <span class="type">int</span> n, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">	sortByValueDensity(arr, n);</span><br><span class="line">	</span><br><span class="line">	<span class="type">double</span> totalValue = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">int</span> currentWeight = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (currentWeight + arr[i].weight &lt;= capacity) &#123;</span><br><span class="line">			<span class="comment">// 将整个物品放入背包</span></span><br><span class="line">			currentWeight += arr[i].weight;</span><br><span class="line">			totalValue += arr[i].value;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 将物品的一部分放入背包</span></span><br><span class="line">			<span class="type">double</span> remainingCapacity = capacity - currentWeight;</span><br><span class="line">			totalValue += (<span class="type">double</span>)arr[i].value / arr[i].weight * remainingCapacity;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> totalValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 示例物品</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Item</span> <span class="title">items</span>[] =</span> &#123;&#123;<span class="number">10</span>, <span class="number">60</span>&#125;, &#123;<span class="number">20</span>, <span class="number">100</span>&#125;, &#123;<span class="number">30</span>, <span class="number">120</span>&#125;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算物品数组的大小</span></span><br><span class="line">	<span class="type">int</span> n = <span class="keyword">sizeof</span>(items) / <span class="keyword">sizeof</span>(items[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 背包容量</span></span><br><span class="line">	<span class="type">int</span> capacity = <span class="number">50</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 解决分数背包问题并输出结果</span></span><br><span class="line">	<span class="type">double</span> maxValue = fractionalKnapsack(items, n, capacity);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Maximum value in Knapsack = %.2lf\n&quot;</span>, maxValue);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、算法时间复杂度分析"><a href="#三、算法时间复杂度分析" class="headerlink" title="三、算法时间复杂度分析"></a>三、算法时间复杂度分析</h3><p><strong>a</strong>.按结束时间排序函数的时间复杂度为O(n^2^),打印选择活动函数的时间复杂度为O(n),故该算法时间复杂度为O(n^2^)。<br><strong>b</strong>.按照价值密度（value&#x2F;weight）降序排序函数的时间复杂度为 O(n^2^)，解决分数背包问题函数的时间复杂度为O(n),故该算法时间复杂度为O(n^2^)。</p>
<h3 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="/images/algorithm/greedy/1.PNG"></p>
<p><img src="/images/algorithm/greedy/2.PNG"></p>
<h3 id="五、实验心得"><a href="#五、实验心得" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><blockquote>
<p>贪心算法每次的选择都是基于当前情况下的最优决策。它满足最优子结构的问题，即一个问题的最优解可以通过子问题的最优解来构建。贪心算法不一定能够得到全局最优解，但能够得到局部最优解。简单来说，贪心算法采取局部最优的决策，希望通过每个局部最优解的选择，最终得到全局的最优解。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>实验9</title>
    <url>/2023/11/29/%E5%AE%9E%E9%AA%8C9/</url>
    <content><![CDATA[<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><blockquote>
<p>​	操作系统中进程通信的作用是允许不同的进程之间交换信息和共享资源，以实现协同工作和数据共享。这有助于多任务处理和分布式系统的有效管理。进程通信可通过各种机制实现，包括共享内存、消息传递、管道等。通过进程通信，不同的进程可以协调完成任务、共享数据，提高系统的整体效率。</p>
</blockquote>
<hr>
<span id="more"></span>

<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>进程间通信有多种方式，其中一些主要的方式包括：</p>
<ol>
<li>管道（Pipes）：单向通信，通常用于具有亲缘关系的父子进程间的通信。</li>
<li>消息队列（Message Queues）：允许通过消息进行双向通信，消息被放入队列，其他进程可以读取队列中的消息。</li>
<li>信号（Signals）：用于通知进程发生了特定事件，例如中断或错误。信号机制比较简单，但不能传递大量数据。</li>
<li>共享内存（Shared Memory）：允许多个进程直接访问同一块物理内存，效率较高。需要进行同步以避免冲突。</li>
<li>套接字（Sockets）：提供了网络通信的一种方式，也可用于本地进程通信。适用于不同计算机或同一计算机上的进程。</li>
<li>信号量（Semaphores）：用于进程间同步和互斥，确保在共享资源上的互斥访问。</li>
</ol>
<blockquote>
<p>每种通信方式都有其适用的场景和特点，选择通信方式通常取决于进程间需要传递的数据量、通信的频率、同步需求等因素。</p>
</blockquote>
<hr>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p><strong>1.</strong>  <strong>fd1 &#x3D; open(“a.txt”, O_RDONLY);</strong></p>
<p>打开文件”a.txt”以只读方式，fd1将被赋予相应的文件描述符值。</p>
<p><strong>2.</strong>  <strong>fd2 &#x3D; open(“b.txt”, O_WRONLY);</strong></p>
<p>打开文件”b.txt”以只写方式，fd2将被赋予相应的文件描述符值。</p>
<p><strong>3.</strong>  <strong>fd3 &#x3D; dup(fd1);</strong></p>
<p>使用dup复制fd1，返回一个新的文件描述符，该描述符是尚未使用的最小值。fd3将获得这个新的文件描述符。</p>
<p><strong>4.</strong>  <strong>fd4 &#x3D; dup2(fd2, 0);</strong></p>
<p>使用dup2复制fd2到0（标准输入），并返回0。fd4将获得这个新的文件描述符。</p>
<p>假设当前终端没有打开任何正常文件，那么：</p>
<ol>
<li><strong>fd1</strong>： 打开”a.txt”，因此其值为 a.txt 的文件描述符。</li>
<li><strong>fd2</strong>： 打开”b.txt”，因此其值为 b.txt 的文件描述符。</li>
<li><strong>fd3</strong>： 使用dup复制fd1，返回的是尚未使用的最小文件描述符，因此 fd3 为 a.txt 的文件描述符。</li>
<li><strong>fd4</strong>： 使用dup2将fd2复制到0（标准输入），返回的是指定的文件描述符，因此 fd4 为 b.txt 的文件描述符。</li>
</ol>
<hr>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//printf</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span> <span class="comment">//open</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span> <span class="comment">//dup fflush close</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">// 打开文件c.txt以只写方式</span></span><br><span class="line">	<span class="type">int</span> file_fd = open(<span class="string">&quot;c.txt&quot;</span>,O_WRONLY|O_CREAT|O_TRUNC,<span class="number">0644</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 备份标准输出文件描述符</span></span><br><span class="line">	<span class="type">int</span> stdout_backup = dup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将标准输出重定向到文件c.txt</span></span><br><span class="line">	dup2(file_fd,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 第一次输出到文件c.txt</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello Linux\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 刷新打开的流</span></span><br><span class="line">	fflush(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 还原标准输出,文件标识符1给stdout_backup，1不再指向file_fd,即还原了</span></span><br><span class="line">	dup2(stdout_backup,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 第二次输出到屏幕上</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello Linux\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 刷新打开的流</span></span><br><span class="line">	fflush(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭文件描述符</span></span><br><span class="line">	close(file_fd);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个程序首先打开文件”c.txt”，然后使用dup2将标准输出重定向到该文件。接着执行printf语句，将输出写入文件。之后，通过dup2将标准输出还原到原来的文件描述符，再次执行printf语句，将输出显示在屏幕上。最后，关闭文件描述符。</p>
</blockquote>
<p>在使用 dup 或 dup2 函数进行文件描述符复制时，还原标准输出指的是将原来的标准输出（文件描述符1）恢复到其先前的状态。在涉及重定向标准输出的操作中，程序可能会将标准输出指向其他文件描述符，比如一个文件或管道。为了确保程序后续的输出会回到标准输出，需要在适当的时候还原标准输出。</p>
<p>举例来说，在之前的一个回答中，有这样一段代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> stdout_backup = dup(<span class="number">1</span>);   <span class="comment">// 备份标准输出文件描述符</span></span><br><span class="line">dup2(file_fd, <span class="number">1</span>);             <span class="comment">// 将标准输出重定向到文件c.txt</span></span><br><span class="line"><span class="comment">// ... 执行一些操作，比如printf</span></span><br><span class="line">dup2(stdout_backup, <span class="number">1</span>);       <span class="comment">// 还原标准输出</span></span><br></pre></td></tr></table></figure>

<p>这里，stdout_backup &#x3D; dup(1) 备份了标准输出的文件描述符，然后 dup2(file_fd, 1) 将标准输出重定向到文件。之后，通过 dup2(stdout_backup, 1) 将标准输出还原到之前备份的文件描述符，以确保后续的输出会回到标准输出。这个还原操作是为了维持程序的输出正常流程。 </p>
<p><strong>这里，dup(1)创建了标准输出文件描述符的副本，并将其存储在stdout_backup中。稍后，如果标准输出被重定向（例如，使用dup2将其指向一个文件），dup2(stdout_backup, 1)通过将备份的文件描述符复制回标准输出来进行还原。</strong></p>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/1.png"></p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//perror</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span> <span class="comment">//exit fork close</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> <span class="comment">//strlen</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">// 创建管道</span></span><br><span class="line">	<span class="type">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">if</span>(pipe(pipe_fd) == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">&quot;Pipe creation falied&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建子进程</span></span><br><span class="line">	<span class="type">pid_t</span> child_pid = fork();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(child_pid == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">&quot;Fork failed&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(child_pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 父进程</span></span><br><span class="line">		<span class="comment">//close(pipe_fd[0]);// 关闭读取端</span></span><br><span class="line">		<span class="type">char</span> message[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Parent sends:%s\n&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将字符串写入管道</span></span><br><span class="line">		write(pipe_fd[<span class="number">1</span>],message,<span class="built_in">strlen</span>(message) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 等待子进程结束</span></span><br><span class="line">		wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取子进程传回的消息</span></span><br><span class="line">		<span class="type">char</span> reversed_message[BUFFER_SIZE];</span><br><span class="line">		read(pipe_fd[<span class="number">0</span>],reversed_message,<span class="keyword">sizeof</span>(reversed_message));</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Parent receives:%s\n&quot;</span>,reversed_message);</span><br><span class="line"></span><br><span class="line">		close(pipe_fd[<span class="number">1</span>]); <span class="comment">// 关闭写入端</span></span><br><span class="line">		close(pipe_fd[<span class="number">0</span>]); <span class="comment">// 关闭读取端</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 子进程</span></span><br><span class="line">		<span class="comment">//close(pipe_fd[1]);// 关闭写入端</span></span><br><span class="line">		<span class="type">char</span> received_message[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 从管道中读取父进程发送的消息</span></span><br><span class="line">		read(pipe_fd[<span class="number">0</span>],received_message,<span class="keyword">sizeof</span>(received_message));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Child receives:%s\n&quot;</span>,received_message);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将字符串倒序</span></span><br><span class="line">		<span class="type">int</span> length = <span class="built_in">strlen</span>(received_message);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">			<span class="type">char</span> temp = received_message[i];</span><br><span class="line">			received_message[i] = received_message[length-i<span class="number">-1</span>];</span><br><span class="line">			received_message[length-i<span class="number">-1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 在倒序字符串后附加子进程号</span></span><br><span class="line">		<span class="type">pid_t</span> child_pid = getpid();</span><br><span class="line">		<span class="built_in">snprintf</span>(received_message + length, BUFFER_SIZE - length, <span class="string">&quot;%d&quot;</span>, child_pid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将处理后的消息写回管道</span></span><br><span class="line">	        write(pipe_fd[<span class="number">1</span>], received_message, <span class="built_in">strlen</span>(received_message) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		close(pipe_fd[<span class="number">0</span>]); <span class="comment">// 关闭读取端</span></span><br><span class="line">		close(pipe_fd[<span class="number">1</span>]); <span class="comment">// 关闭写入端</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>父子进程不能关闭写入端和读取端，否则父进程无法接收子进程的字符串</p>
</blockquote>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/2.png"></p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><blockquote>
<p>思路：进程1–&gt;pipe_ps_grep–&gt;进程2–&gt;pipe_grep_wc-&gt;进程3</p>
</blockquote>
<p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> pipe_ps_grep[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> pipe_grep_wc[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个管道</span></span><br><span class="line">    <span class="keyword">if</span> (pipe(pipe_ps_grep) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe_ps_grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> ps_child_pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第一个子进程执行 ps -uax</span></span><br><span class="line">    <span class="keyword">if</span> ((ps_child_pid = fork()) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork_ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ps_child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*使用STDOUT_FILENO文件描述符指向pipe_ps_grep[1]：写管道，一般情况下对应的文件描述符是4，</span></span><br><span class="line"><span class="comment">        需要关闭原文件描述符*/</span></span><br><span class="line">        dup2(pipe_ps_grep[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">        <span class="comment">//关闭原文件描述符</span></span><br><span class="line">        close(pipe_ps_grep[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_ps_grep[<span class="number">1</span>]);</span><br><span class="line">        execlp(<span class="string">&quot;ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;-uax&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execlp_ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个管道</span></span><br><span class="line">    <span class="keyword">if</span> (pipe(pipe_grep_wc) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe_grep_wc&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> grep_child_pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个子进程执行 grep root</span></span><br><span class="line">    <span class="keyword">if</span> ((grep_child_pid = fork()) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork_grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (grep_child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">     	<span class="comment">//读pipe_ps_grep[0]端</span></span><br><span class="line">        dup2(pipe_ps_grep[<span class="number">0</span>], STDIN_FILENO);</span><br><span class="line">        close(pipe_ps_grep[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_ps_grep[<span class="number">1</span>]);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//写pipe_grep_wc[1]端</span></span><br><span class="line">        dup2(pipe_grep_wc[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        execlp(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;grep&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execlp_grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭第一个管道在父进程中未使用的部分</span></span><br><span class="line">    close(pipe_ps_grep[<span class="number">0</span>]);</span><br><span class="line">    close(pipe_ps_grep[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第三个子进程执行 wc -l</span></span><br><span class="line">    <span class="type">pid_t</span> wc_child_pid;</span><br><span class="line">    <span class="keyword">if</span> ((wc_child_pid = fork()) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork_wc&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wc_child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//读pipe_grep_wc[1]端</span></span><br><span class="line">        dup2(pipe_grep_wc[<span class="number">0</span>], STDIN_FILENO);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">0</span>]);</span><br><span class="line">        close(pipe_grep_wc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        execlp(<span class="string">&quot;wc&quot;</span>, <span class="string">&quot;wc&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execlp_wc&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭第二个管道在父进程中未使用的部分</span></span><br><span class="line">    close(pipe_grep_wc[<span class="number">0</span>]);</span><br><span class="line">    close(pipe_grep_wc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待所有子进程结束</span></span><br><span class="line">    waitpid(ps_child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    waitpid(grep_child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    waitpid(wc_child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>execlp</code>是一个在Unix&#x2F;Linux系统中用于执行可执行文件的系统调用。它会取代当前进程的内存映像，加载并执行指定的可执行文件。</p>
<p>具体来说，<code>execlp</code>函数的作用是在调用进程中执行一个新的程序。它接受可执行文件的路径，以及一系列的命令行参数，最后一个参数必须是NULL，用于表示参数列表的结束。</p>
<p>在上述C程序的例子中，<code>execlp(&quot;ps&quot;, &quot;ps&quot;, &quot;-uax&quot;, NULL)</code>用于执行<code>ps -uax</code>命令，而<code>execlp(&quot;grep&quot;, &quot;grep&quot;, &quot;root&quot;, NULL)</code>用于执行<code>grep root</code>命令。这两个函数调用使得子进程加载并执行了这两个命令，替代了原有的进程内存映像。</p>
</blockquote>
<p>这是一个使用C语言编写的程序，通过无名管道、fork函数和exec函数实现了模拟命令<code>ps -uax | grep root | wc -l</code>的功能。下面是对程序的解释：</p>
<ol>
<li><p><strong>管道的创建：</strong><br><code>pipe(pipe_ps_grep)</code>: 创建了一个管道，用于连接<code>ps</code>进程和<code>grep</code>进程。</p>
<p>  <code>pipe(pipe_grep_wc)</code>: 创建了另一个管道，用于连接<code>grep</code>进程和<code>wc</code>进程。</p>
</li>
<li><p><strong>ps进程的创建：</strong></p>
<p><code>ps_child_pid = fork()</code>: 创建了第一个子进程，该子进程执行<code>ps -uax</code>命令。</p>
<p>在子进程中，使用<code>dup2</code>将<code>ps</code>的标准输出连接到<code>pipe_ps_grep</code>的写入端口，并通过<code>execlp</code>执行<code>ps</code>命令。</p>
</li>
<li><p><strong>grep进程的创建：</strong></p>
<p><code>grep_child_pid = fork()</code>: 创建了第二个子进程，该子进程执行<code>grep root</code>命令。</p>
<p>在子进程中，使用<code>dup2</code>将<code>ps</code>的标准输出连接到<code>pipe_ps_grep</code>的读取端口，将<code>grep</code>的标准输出连接到<code>pipe_grep_wc</code>的写入端口，并通过<code>execlp</code>执行<code>grep</code>命令。</p>
</li>
<li><p><strong>wc进程的创建：</strong></p>
<p><code>wc_child_pid = fork()</code>: 创建了第三个子进程，该子进程执行<code>wc -l</code>命令。</p>
<p>在子进程中，使用<code>dup2</code>将<code>grep</code>的标准输出连接到<code>pipe_grep_wc</code>的读取端口，并通过<code>execlp</code>执行<code>wc</code>命令。</p>
</li>
<li><p><strong>管道的关闭：</strong></p>
<p>父进程关闭了在子进程中未使用的管道部分。</p>
<blockquote>
<p><code>dup2</code>函数用于复制文件描述符，将一个文件描述符指向另一个文件描述符。当你使用<code>dup2</code>将某个文件描述符指向一个管道的端口时，通常需要关闭原始的文件描述符，因为它已经被复制到了新的文件描述符。</p>
<p>在管道的使用场景中，<code>dup2</code>的典型用法是将标准输入或标准输出重定向到管道的读取端或写入端。一旦重定向完成，原始的标准输入或标准输出就变得多余了，因此可以关闭它。</p>
</blockquote>
</li>
<li><p><strong>等待子进程结束：</strong></p>
<p>使用<code>waitpid</code>函数等待所有子进程执行完毕。</p>
</li>
</ol>
<p>​	这样，通过使用管道连接多个子进程，实现了<code>ps -uax | grep root | wc -l</code>命令的功能。父进程负责创建子进程，并确保正确的管道连接。</p>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/3.png"></p>
<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><p><strong>代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//打开一个管道（只读），并执行ps -uax</span></span><br><span class="line">    FILE *pipe_ps = popen(<span class="string">&quot;ps -uax&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pipe_ps == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;popen ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开一个管道（只写），并执行ps -uax</span></span><br><span class="line">    FILE *pipe_grep = popen(<span class="string">&quot;grep root&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pipe_grep == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;popen grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">size_t</span> bytesRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从ps的输出读取数据并写入到grep</span></span><br><span class="line">    <span class="keyword">while</span> ((bytesRead = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), pipe_ps)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fwrite(buffer, <span class="number">1</span>, bytesRead, pipe_grep);</span><br><span class="line">        <span class="comment">//size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);</span></span><br><span class="line">        <span class="comment">//size_t fread( void *buffer, size_t size, size_t count, FILE *stream );</span></span><br><span class="line">        <span class="comment">//size--这是要被写入的每个元素的大小，以字节为单位。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭管道</span></span><br><span class="line">    <span class="keyword">if</span> (pclose(pipe_ps) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pclose ps&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pclose(pipe_grep) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pclose grep&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个程序使用两个popen调用分别执行ps -uax和grep root，并将它们通过管道连接起来。然后，通过fread和fwrite从ps的输出读取数据并写入到grep的输入。最后，使用pclose关闭两个管道。</p>
<p>这样，你就完成了模拟ps -uax | grep root的操作，而无需手动创建管道和子进程</p>
</blockquote>
<p><strong>结果：</strong></p>
<p><img src="/images/Linux_pic/sy9/4.png"></p>
<p><code>popen</code>是一个C标准库函数，用于在一个新的进程中打开一个管道并执行一个 shell 命令。它返回一个文件指针，可以用于读取或写入与子进程关联的管道。</p>
<p>函数签名如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">popen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command, <span class="type">const</span> <span class="type">char</span> *type)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>command</code> 参数是要执行的 shell 命令字符串。</li>
<li><code>type</code> 参数是一个字符串，用于指定打开管道的方式。常用的值包括 <code>&quot;r&quot;</code>（只读）和 <code>&quot;w&quot;</code>（只写）。</li>
</ul>
<p>返回值是一个文件指针，可以使用标准文件操作函数（如 <code>fread</code>、<code>fwrite</code>、<code>fclose</code> 等）来读取或写入与子进程关联的管道。</p>
<p>例如，<code>popen(&quot;ps -uax&quot;, &quot;r&quot;)</code> 会执行 <code>ps -uax</code> 命令，并返回一个文件指针，可以用于读取该命令的标准输出。</p>
<p><code>pclose</code> 用于关闭由 <code>popen</code> 打开的管道，并等待相关的子进程结束。它的函数签名如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>stream</code> 是 <code>popen</code> 返回的文件指针。</li>
</ul>
<p>返回值是子进程的终止状态，或者 -1 表示有错误发生。</p>
<p>请注意，<code>popen</code> 和 <code>pclose</code> 在处理大量数据时可能存在一些限制，因为它们依赖于标准I&#x2F;O缓冲区。如果你需要更灵活的控制，或者处理大量数据，可能需要使用其他机制，比如<code>fork</code>和<code>pipe</code>。</p>
]]></content>
      <categories>
        <category>Linux实验</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>分治法</title>
    <url>/2023/12/19/%E5%88%86%E6%B2%BB%E6%B3%95/</url>
    <content><![CDATA[<p>1.<strong>ChessCovering 问题</strong>（棋盘覆盖）</p>
<blockquote>
<p>易知，覆盖任意一个2^k×2^k的特殊棋盘，用到的骨牌数恰好为(4^K-1)&#x2F;3。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 8 <span class="comment">//2^k×2^k</span></span></span><br><span class="line"><span class="type">int</span> Board[N][N];<span class="comment">//定义一个棋盘</span></span><br><span class="line"><span class="type">int</span> tile = <span class="number">1</span>; <span class="comment">//表示骨牌的型号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ChessBoard</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> fr, <span class="type">int</span> fc, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="comment">//r表示棋盘左上角行号，c表示棋盘左上角列号，fr表示特殊方格所在行号，fc表示特殊方格所在列号，size棋盘规格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*原理：为无特殊方格的小棋盘（分之后的）添加特殊方格*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//将棋盘各方格初始化为0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			Board[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	ChessBoard(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, N);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输出棋盘</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, Board[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;PAUSE&quot;</span>); <span class="comment">//因编译器原因，防止运行结果闪退</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ChessBoard</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> fr, <span class="type">int</span> fc, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (size == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> t = tile++; 								<span class="comment">//本列用相同数字表示骨牌</span></span><br><span class="line">	<span class="type">int</span> s = size / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fr &lt; r + s &amp;&amp; fc &lt; c + s) 					<span class="comment">//特殊方格在此小棋盘内</span></span><br><span class="line">		ChessBoard(r, c, fr, fc, s);</span><br><span class="line">	<span class="keyword">else</span> &#123; 											<span class="comment">//特殊方格不在此棋盘</span></span><br><span class="line">		Board[r + s - <span class="number">1</span>][c + s - <span class="number">1</span>] = t; 			<span class="comment">//用t号骨牌覆盖右下角</span></span><br><span class="line">		ChessBoard(r, c, r + s - <span class="number">1</span>, c + s - <span class="number">1</span>, s); 	<span class="comment">//继续覆盖其余方格</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//后面三个if-else类似于第一个</span></span><br><span class="line">	<span class="keyword">if</span> (fr &gt;= r + s &amp;&amp; fc &lt; c + s) 					<span class="comment">//特殊方格在此小棋盘内（第三象限），人为选定默认认为在</span></span><br><span class="line">		ChessBoard(r + s, c, fr, fc, s); 			<span class="comment">//棋盘左上角坐标为(r+s,c)</span></span><br><span class="line">	<span class="keyword">else</span> &#123; 											<span class="comment">//特殊方格不在此小棋盘内</span></span><br><span class="line">		Board[r + s][c + s - <span class="number">1</span>] = t; 				<span class="comment">//选定(r+s,c+s-1)为特殊方块，用t号骨牌覆盖右上角</span></span><br><span class="line">		ChessBoard(r + s, c, r + s, c + s - <span class="number">1</span>, s); 	<span class="comment">//继续覆盖其余方格</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fr &lt; r + s &amp;&amp; fc &gt;= c + s) 					<span class="comment">//特殊方格在此小棋盘内（第一象限），人为选定默认认为在</span></span><br><span class="line">		ChessBoard(r, c + s, fr, fc, s);</span><br><span class="line">	<span class="keyword">else</span> &#123; 											<span class="comment">//特殊方格不在此小棋盘内</span></span><br><span class="line">		Board[r + s - <span class="number">1</span>][c + s] = t; 				<span class="comment">//用t号骨牌覆盖左下角</span></span><br><span class="line">		ChessBoard(r, c + s, r + s - <span class="number">1</span>, c + s, s);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fr &gt;= r + s &amp;&amp; fc &gt;= c + s) 				<span class="comment">//特殊方格在此小棋盘内（第四象限），人为选定默认认为在</span></span><br><span class="line">		ChessBoard(r + s, c + s, fr, fc, s);</span><br><span class="line">	<span class="keyword">else</span> &#123; 											<span class="comment">//特殊方格不在此小棋盘内</span></span><br><span class="line">		Board[r + s][c + s] = t; 					<span class="comment">//用t号骨牌覆盖左上角</span></span><br><span class="line">		ChessBoard(r + s, c + s, r + s, c + s, s);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.<strong>最接近点对问题</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个二维点的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数，用于根据x坐标对点进行排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compareX</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ((<span class="keyword">struct</span> Point*)a)-&gt;x - ((<span class="keyword">struct</span> Point*)b)-&gt;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数，用于根据y坐标对点进行排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compareY</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ((<span class="keyword">struct</span> Point*)a)-&gt;y - ((<span class="keyword">struct</span> Point*)b)-&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算两点之间的距离</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">dist</span><span class="params">(<span class="keyword">struct</span> Point p1, <span class="keyword">struct</span> Point p2)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算最小距离的函数</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">min</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (x &lt; y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在给定点集中找到最小距离的函数,左右区计算最近距离</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">bruteForce</span><span class="params">(<span class="keyword">struct</span> Point P[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="type">float</span> min_distance = FLT_MAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dist(P[i], P[j]) &lt; min_distance) &#123;</span><br><span class="line">				min_distance = dist(P[i], P[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min_distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用分治法找到最小距离的函数</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">closestUtil</span><span class="params">(<span class="keyword">struct</span> Point Px[], <span class="keyword">struct</span> Point Py[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123; <span class="comment">//分为每个区3个，再BF算最小距离</span></span><br><span class="line">		<span class="keyword">return</span> bruteForce(Px, n);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 找到中间点</span></span><br><span class="line">	<span class="type">int</span> mid = n / <span class="number">2</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">midPoint</span> =</span> Px[mid];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 分别在左右子集中递归查找最小距离</span></span><br><span class="line">	<span class="type">float</span> dl = closestUtil(Px, Py, mid);</span><br><span class="line">	<span class="type">float</span> dr = closestUtil(Px + mid, Py + mid, n - mid);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 取两个子集中的最小距离</span></span><br><span class="line">	<span class="type">float</span> d = min(dl, dr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构建y坐标在(d - 2d, d + 2d)范围内的点集</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">strip</span>[<span class="title">n</span>];</span></span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(Py[i].x - midPoint.x) &lt; d) &#123;</span><br><span class="line">			strip[j] = Py[i];</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 找到strip中的最小距离</span></span><br><span class="line">	<span class="type">float</span> minStrip = bruteForce(strip, j);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回最小距离</span></span><br><span class="line">	<span class="keyword">return</span> min(d, minStrip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数，计算最小距离</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">closest</span><span class="params">(<span class="keyword">struct</span> Point P[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">Px</span>[<span class="title">n</span>];</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">Py</span>[<span class="title">n</span>];</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		Px[i] = P[i];</span><br><span class="line">		Py[i] = P[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 按x坐标排序</span></span><br><span class="line">	qsort(Px, n, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Point), compareX);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 按y坐标排序</span></span><br><span class="line">	qsort(Py, n, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Point), compareY);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用分治法计算最小距离</span></span><br><span class="line">	<span class="keyword">return</span> closestUtil(Px, Py, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">P</span>[] =</span> &#123;</span><br><span class="line">		&#123;<span class="number">8</span>,<span class="number">-15</span>&#125;,&#123;<span class="number">9</span>,<span class="number">-29</span>&#125;,&#123;<span class="number">29</span>,<span class="number">-28</span>&#125;,&#123;<span class="number">-30</span>,<span class="number">-13</span>&#125;,&#123;<span class="number">-3</span>,<span class="number">45</span>&#125;,&#123;<span class="number">-33</span>,<span class="number">-12</span>&#125;,&#123;<span class="number">-7</span>,<span class="number">35</span>&#125;,&#123;<span class="number">47</span>,<span class="number">-45</span>&#125;,&#123;<span class="number">43</span>,<span class="number">-10</span>&#125;,&#123;<span class="number">24</span>,<span class="number">-6</span>&#125;,</span><br><span class="line">		&#123;<span class="number">47</span>,<span class="number">23</span>&#125;,&#123;<span class="number">18</span>,<span class="number">-23</span>&#125;,&#123;<span class="number">-37</span>,<span class="number">16</span>&#125;,&#123;<span class="number">-45</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-43</span>&#125;,&#123;<span class="number">-42</span>,<span class="number">16</span>&#125;,&#123;<span class="number">-16</span>,<span class="number">-50</span>&#125;,&#123;<span class="number">-39</span>,<span class="number">35</span>&#125;,&#123;<span class="number">-48</span>,<span class="number">38</span>&#125;,&#123;<span class="number">-26</span>,<span class="number">-28</span>&#125;,</span><br><span class="line">		&#123;<span class="number">49</span>,<span class="number">31</span>&#125;,&#123;<span class="number">42</span>,<span class="number">-36</span>&#125;,&#123;<span class="number">-50</span>,<span class="number">-33</span>&#125;,&#123;<span class="number">41</span>,<span class="number">36</span>&#125;,&#123;<span class="number">-13</span>,<span class="number">14</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">32</span>,<span class="number">-19</span>&#125;,&#123;<span class="number">0</span>,<span class="number">17</span>&#125;,&#123;<span class="number">-35</span>,<span class="number">15</span>&#125;,&#123;<span class="number">18</span>,<span class="number">-5</span>&#125;,</span><br><span class="line">		&#123;<span class="number">14</span>,<span class="number">46</span>&#125;,&#123;<span class="number">0</span>,<span class="number">23</span>&#125;,&#123;<span class="number">-7</span>,<span class="number">28</span>&#125;,&#123;<span class="number">-45</span>,<span class="number">-28</span>&#125;,&#123;<span class="number">46</span>,<span class="number">10</span>&#125;,&#123;<span class="number">5</span>,<span class="number">-31</span>&#125;,&#123;<span class="number">42</span>,<span class="number">5</span>&#125;,&#123;<span class="number">-28</span>,<span class="number">-22</span>&#125;,&#123;<span class="number">36</span>,<span class="number">-13</span>&#125;,&#123;<span class="number">-24</span>,<span class="number">-39</span>&#125;,</span><br><span class="line">		&#123;<span class="number">-12</span>,<span class="number">-8</span>&#125;,&#123;<span class="number">42</span>,<span class="number">-47</span>&#125;,&#123;<span class="number">29</span>,<span class="number">6</span>&#125;,&#123;<span class="number">30</span>,<span class="number">26</span>&#125;,&#123;<span class="number">30</span>,<span class="number">6</span>&#125;,&#123;<span class="number">-14</span>,<span class="number">-39</span>&#125;,&#123;<span class="number">-49</span>,<span class="number">16</span>&#125;,&#123;<span class="number">39</span>,<span class="number">-20</span>&#125;,&#123;<span class="number">-35</span>,<span class="number">28</span>&#125;,&#123;<span class="number">-33</span>,<span class="number">13</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> n = <span class="keyword">sizeof</span>(P) / <span class="keyword">sizeof</span>(P[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最接近点的距离是 %f\n&quot;</span>, closest(P, n));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux期末题目&amp;源码</title>
    <url>/2023/12/19/Linux%E6%9C%9F%E6%9C%AB%E9%A2%98%E7%9B%AE&amp;%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h3 id="1-文件处理"><a href="#1-文件处理" class="headerlink" title="1.文件处理"></a>1.文件处理</h3><p>描述：小林想写一个程序实现文件操作，他想将任意数目的源文件复制到一个目标文件中，若目标文件没有则创建。出现错误时需要显示相应的错误。<br>用法示例：<code>./mycp a.txt dest.txt  ./mycp a.txt b.txt dest.txt</code><br>请编程解决。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mycp.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copyFilesToDestination</span><span class="params">(<span class="type">int</span> numFiles, <span class="type">char</span> *sourceFiles[], <span class="type">char</span> *destinationFile)</span> &#123;</span><br><span class="line">    <span class="comment">// 打开目标文件，使用 &quot;w&quot; 模式，如果文件不存在则创建</span></span><br><span class="line">    FILE *destFile = fopen(destinationFile, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查目标文件是否成功打开</span></span><br><span class="line">    <span class="keyword">if</span> (destFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error opening destination file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为复制设置缓冲区</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历每个待复制的文件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numFiles; ++i) &#123;</span><br><span class="line">        <span class="comment">// 打开当前待复制的源文件</span></span><br><span class="line">        FILE *sourceFile = fopen(sourceFiles[i], <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查源文件是否成功打开</span></span><br><span class="line">        <span class="keyword">if</span> (sourceFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Error opening source file&quot;</span>);</span><br><span class="line">            fclose(destFile);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 逐块复制源文件到目标文件</span></span><br><span class="line">        <span class="type">size_t</span> bytesRead;</span><br><span class="line">        <span class="keyword">while</span> ((bytesRead = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), sourceFile)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fwrite(buffer, <span class="number">1</span>, bytesRead, destFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭当前源文件</span></span><br><span class="line">        fclose(sourceFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭目标文件</span></span><br><span class="line">    fclose(destFile);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示复制成功的消息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d file(s) copied successfully to %s\n&quot;</span>, numFiles, destinationFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="comment">// 检查命令行参数数量</span></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s file1 file2 ... fileN destinationFile\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算待复制文件的数量</span></span><br><span class="line">    <span class="type">int</span> numFiles = argc - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用复制文件的函数</span></span><br><span class="line">    copyFilesToDestination(numFiles, argv + <span class="number">1</span>, argv[argc - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-进程通信"><a href="#2-进程通信" class="headerlink" title="2.进程通信"></a>2.进程通信</h3><p>模拟随机密钥，现有8个用户，用户id分别为1,2,3,4,5,6,7,8。程序A定时一次性为8个用户生成一串长度为8的随机数作为密钥并显示用户id和对应密钥，并将其传送给程序B。程序B模拟用户登录，输入用户id和密钥正确才能返回“登录成功”。采用共享内存传递数据，写出程序代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&quot;mmap.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY_LENGTH 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_USERS 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHM_NAME <span class="string">&quot;/myshm&quot;</span></span></span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mmap.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用户结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">char</span> key[KEY_LENGTH + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 打开或创建共享内存对象</span></span><br><span class="line">	<span class="type">int</span> shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, <span class="number">0666</span>);</span><br><span class="line">	<span class="keyword">if</span> (shm_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">		perror(<span class="string">&quot;shm_open&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置共享内存对象的大小</span></span><br><span class="line">	<span class="keyword">if</span> (ftruncate(shm_fd, NUM_USERS * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> User)) == <span class="number">-1</span>) &#123;</span><br><span class="line">		perror(<span class="string">&quot;ftruncate&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将共享内存对象映射到进程地址空间</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">User</span> *<span class="title">users</span> =</span> (<span class="keyword">struct</span> User *)mmap(<span class="literal">NULL</span>, NUM_USERS * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> User), PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (users == MAP_FAILED) &#123;</span><br><span class="line">		perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成一次性的随机数作为密钥，并写入用户信息到共享内存</span></span><br><span class="line">	srand(time(<span class="literal">NULL</span>)); <span class="comment">// 初始化随机数种子</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\033c&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_USERS; ++i) &#123;</span><br><span class="line">			users[i].id = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; KEY_LENGTH; ++j) &#123;</span><br><span class="line">				users[i].key[j] = <span class="string">&#x27;0&#x27;</span> + rand() % <span class="number">10</span>; <span class="comment">// 生成数字字符</span></span><br><span class="line">			&#125;</span><br><span class="line">			users[i].key[KEY_LENGTH] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 添加字符串结束符</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 显示生成的用户ID和密钥</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\x1b[32mUser %d:\x1b[0m Key \x1b[31m%s\x1b[0m\n&quot;</span>, users[i].id, users[i].key);</span><br><span class="line">		&#125;</span><br><span class="line">		sleep(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解除共享内存映射</span></span><br><span class="line">	<span class="keyword">if</span> (munmap(users, NUM_USERS * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> User)) == <span class="number">-1</span>) &#123;</span><br><span class="line">		perror(<span class="string">&quot;munmap&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭共享内存文件描述符</span></span><br><span class="line">	close(shm_fd);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用户结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> key[KEY_LENGTH + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 打开共享内存对象</span></span><br><span class="line">    <span class="type">int</span> shm_fd = shm_open(SHM_NAME, O_RDONLY, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;shm_open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将共享内存对象映射到进程地址空间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">User</span> *<span class="title">users</span> =</span> (<span class="keyword">struct</span> User *)mmap(<span class="literal">NULL</span>, NUM_USERS * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> User), PROT_READ, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (users == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取用户信息，并模拟用户登录</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 显示用户ID</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter the ID for User (1-%d): &quot;</span>, NUM_USERS);</span><br><span class="line">        <span class="type">int</span> entered_id;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;entered_id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查用户ID的有效性</span></span><br><span class="line">        <span class="keyword">if</span> (entered_id &lt; <span class="number">1</span> || entered_id &gt; NUM_USERS) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Invalid ID. Please enter a valid ID (1-%d).\n&quot;</span>, NUM_USERS);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示用户对应的密钥</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter the key for User %d: &quot;</span>, entered_id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟用户输入</span></span><br><span class="line">        <span class="type">char</span> entered_key[KEY_LENGTH + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, entered_key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较密钥</span></span><br><span class="line">        <span class="type">int</span> user_index = entered_id - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(entered_key, users[user_index].key, KEY_LENGTH) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;User %d: Login successful!\n&quot;</span>, users[user_index].id);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;User %d: Login failed. Incorrect key or ID.\n&quot;</span>, users[user_index].id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解除共享内存映射</span></span><br><span class="line">    <span class="keyword">if</span> (munmap(users, NUM_USERS * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> User)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;munmap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭共享内存文件描述符</span></span><br><span class="line">    close(shm_fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-线程同步互斥"><a href="#3-线程同步互斥" class="headerlink" title="3.线程同步互斥"></a>3.线程同步互斥</h3><p>用线程同步互斥模拟一个回合制游戏：皮卡丘和卡比兽相互对战。皮卡丘的攻击伤害是5，血量是30。卡比兽的攻击伤害是3，血量是50。轮流攻击对方，即同一时间内只能有一只能攻击对方，另一只只能被攻击。假设皮卡丘先发起攻击，试模拟最后谁赢了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pokemon.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//Pikachu:皮卡丘</span></span><br><span class="line"><span class="comment">//Snorlax：卡比兽</span></span><br><span class="line"><span class="comment">// 定义宝可梦结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pokemon</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> health;</span><br><span class="line">    <span class="type">int</span> attack;</span><br><span class="line">    <span class="type">sem_t</span> turnSemaphore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：宝可梦攻击</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">attack</span><span class="params">(<span class="keyword">struct</span> Pokemon *attacker, <span class="keyword">struct</span> Pokemon *target)</span> &#123;</span><br><span class="line">    sem_wait(&amp;attacker-&gt;turnSemaphore);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s attacks %s with damage \033[1;31m%d\033[0m\n&quot;</span>, attacker-&gt;name, target-&gt;name, attacker-&gt;attack);</span><br><span class="line">    target-&gt;health -= attacker-&gt;attack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target-&gt;health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s failed!\n&quot;</span>, target-&gt;name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&#x27;s health: \033[1;32m%d\033[0m, %s&#x27;s health: \033[1;32m%d\033[0m\n&quot;</span>, target-&gt;name, target-&gt;health,attacker-&gt;name,attacker-&gt;health);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sem_post(&amp;target-&gt;turnSemaphore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：线程函数，模拟宝可梦对战</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">battle</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pokemon</span> *<span class="title">pikachu</span> =</span> (<span class="keyword">struct</span> Pokemon *)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pokemon</span> *<span class="title">snorlax</span> =</span> (<span class="keyword">struct</span> Pokemon *)(args + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Pokemon));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pikachu-&gt;health &gt; <span class="number">0</span> &amp;&amp; snorlax-&gt;health &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        attack(pikachu, snorlax);</span><br><span class="line">        sleep(<span class="number">1</span>);  <span class="comment">// 等待一段时间，模拟回合结束</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (snorlax-&gt;health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 如果 Snorlax 已经被击败，结束对战</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        attack(snorlax, pikachu);</span><br><span class="line">        sleep(<span class="number">1</span>);  <span class="comment">// 等待一段时间，模拟回合结束</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化宝可梦</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pokemon</span> <span class="title">pikachu</span> =</span> &#123;<span class="string">&quot;Pikachu&quot;</span>, <span class="number">30</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pokemon</span> <span class="title">snorlax</span> =</span> &#123;<span class="string">&quot;Snorlax&quot;</span>, <span class="number">50</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化信号量</span></span><br><span class="line">    sem_init(&amp;pikachu.turnSemaphore, <span class="number">0</span>, <span class="number">1</span>);  <span class="comment">// 初始值为1表示皮卡丘先攻击</span></span><br><span class="line">    sem_init(&amp;snorlax.turnSemaphore, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建线程</span></span><br><span class="line">    <span class="type">pthread_t</span> pikachu_thread, snorlax_thread;</span><br><span class="line">    pthread_create(&amp;pikachu_thread, <span class="literal">NULL</span>, battle, &amp;pikachu);</span><br><span class="line">    pthread_create(&amp;snorlax_thread, <span class="literal">NULL</span>, battle, &amp;snorlax);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程结束</span></span><br><span class="line">    pthread_join(pikachu_thread, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(snorlax_thread, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断哪只宝可梦赢得了对战</span></span><br><span class="line">    <span class="keyword">if</span> (pikachu.health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Snorlax wins!\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Pikachu wins!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁信号量</span></span><br><span class="line">    sem_destroy(&amp;pikachu.turnSemaphore);</span><br><span class="line">    sem_destroy(&amp;snorlax.turnSemaphore);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-网络编程"><a href="#4-网络编程" class="headerlink" title="4.网络编程"></a>4.网络编程</h3>]]></content>
      <categories>
        <category>Linux实验</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力算法</title>
    <url>/2023/12/19/%E6%9A%B4%E5%8A%9B%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p><strong>a.</strong> 最接近点对问题的BF算法实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">calculateDistance</span><span class="params">(<span class="keyword">struct</span> Point p1, <span class="keyword">struct</span> Point p2)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(p1.x - p2.x, <span class="number">2</span>) + <span class="built_in">pow</span>(p1.y - p2.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">closestPair</span><span class="params">(<span class="keyword">struct</span> Point points[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="type">float</span> minDistance = FLT_MAX;</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="type">float</span> distance = calculateDistance(points[i], points[j]);</span><br><span class="line">			<span class="keyword">if</span> (distance &lt; minDistance) &#123;</span><br><span class="line">				minDistance = distance;</span><br><span class="line">				a = i;</span><br><span class="line">				b = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最近点对的距离是 %f&quot;</span>, minDistance);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最近点对是&lt;%d,%d&gt;,&lt;%d,%d&gt;&quot;</span>, points[a].x, points[a].y, points[b].x, points[b].y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">points</span>[] =</span> &#123;</span><br><span class="line">		&#123;<span class="number">8</span>,<span class="number">-15</span>&#125;,&#123;<span class="number">9</span>,<span class="number">-29</span>&#125;,&#123;<span class="number">29</span>,<span class="number">-28</span>&#125;,&#123;<span class="number">-30</span>,<span class="number">-13</span>&#125;,&#123;<span class="number">-3</span>,<span class="number">45</span>&#125;,&#123;<span class="number">-33</span>,<span class="number">-12</span>&#125;,&#123;<span class="number">-7</span>,<span class="number">35</span>&#125;,&#123;<span class="number">47</span>,<span class="number">-45</span>&#125;,&#123;<span class="number">43</span>,<span class="number">-10</span>&#125;,&#123;<span class="number">24</span>,<span class="number">-6</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> n = <span class="keyword">sizeof</span>(points) / <span class="keyword">sizeof</span>(points[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	closestPair(points, n);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>b.</strong> Hamilton回路问题的BF算法实现</p>
<blockquote>
<p>哈密顿图（哈密尔顿图）（英语：Hamiltonian graph，或Traceable graph）是一个无向图，由天文学家哈密顿提出，由指定的起点前往指定的终点，途中经过所有其他节点且只经过一次。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V 4 <span class="comment">// 图的顶点数  </span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printSolution</span><span class="params">(<span class="type">int</span> path[])</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//pos:当前位置，表示当前在构建路径的过程中所处的位置</span></span><br><span class="line"><span class="comment">//函数用于检查在当前路径构建的情况下，是否可以安全地将指定的顶点 v 加入到路径中</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isSafe</span><span class="params">(<span class="type">int</span> v, <span class="type">bool</span> graph[V][V], <span class="type">int</span> path[], <span class="type">int</span> pos)</span> &#123;  </span><br><span class="line">	<span class="keyword">if</span> (graph[path[pos - <span class="number">1</span>]][v] == <span class="number">0</span>) &#123;  <span class="comment">//前一个顶点到当前顶点是否有边相连</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;  </span><br><span class="line">		<span class="keyword">if</span> (path[i] == v) &#123;  <span class="comment">//检查路径中是否已经包含了顶点 v</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hamiltonianCycleUtil</span><span class="params">(<span class="type">bool</span> graph[V][V], <span class="type">int</span> path[], <span class="type">int</span> pos)</span> &#123; <span class="comment">//构建哈密尔顿回路的路径</span></span><br><span class="line">	<span class="comment">//最后一个点</span></span><br><span class="line">	<span class="keyword">if</span> (pos == V) &#123;  </span><br><span class="line">		<span class="keyword">if</span> (graph[path[pos - <span class="number">1</span>]][path[<span class="number">0</span>]] == <span class="number">1</span>) &#123;  <span class="comment">//最后一个点和起始点有连接，即构成回路</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt; V; v++) &#123;  </span><br><span class="line">		<span class="keyword">if</span> (isSafe(v, graph, path, pos)) &#123;  </span><br><span class="line">			path[pos] = v;  </span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (hamiltonianCycleUtil(graph, path, pos + <span class="number">1</span>)) &#123;  <span class="comment">//构建哈密尔顿回路的路径</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">			&#125;  </span><br><span class="line">			</span><br><span class="line">			path[pos] = <span class="number">-1</span>; <span class="comment">// 否则回溯</span></span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hamiltonianCycle</span><span class="params">(<span class="type">bool</span> graph[V][V])</span> &#123;  </span><br><span class="line">	<span class="type">int</span> path[V];  </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;  </span><br><span class="line">		path[i] = <span class="number">-1</span>;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	path[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 从第一个顶点开始  </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (!hamiltonianCycleUtil(graph, path, <span class="number">1</span>)) &#123;  </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No Hamiltonian Cycle exists&quot;</span>);  </span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	printSolution(path);  </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printSolution</span><span class="params">(<span class="type">int</span> path[])</span> &#123;  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hamiltonian Cycle found: \n&quot;</span>);  </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;  </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, path[i]);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, path[<span class="number">0</span>]); <span class="comment">//完成循环  </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">	<span class="type">bool</span> graph[V][V] = &#123;  </span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">	&#125;;  </span><br><span class="line">	</span><br><span class="line">	hamiltonianCycle(graph);  </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>BF</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2023/12/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>1.<strong>Trangle Problem</strong>（数字三角形问题）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROWS 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_COLS 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算最小路径和并填充值表和路表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(<span class="type">int</span> triangle[ROWS][MAX_COLS], <span class="type">int</span> valueTable[ROWS][MAX_COLS], <span class="type">int</span> pathTable[ROWS][MAX_COLS])</span> &#123;</span><br><span class="line">	<span class="comment">// 初始化最后一行</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAX_COLS; j++) &#123;</span><br><span class="line">		valueTable[ROWS - <span class="number">1</span>][j] = triangle[ROWS - <span class="number">1</span>][j];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 从倒数第二层开始向上计算</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = ROWS - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">			<span class="comment">// 当前位置的最小路径和等于当前位置的值加上下一层相邻位置的最小路径和的较小值</span></span><br><span class="line">			valueTable[i][j] = triangle[i][j] + ((valueTable[i + <span class="number">1</span>][j] &lt; valueTable[i + <span class="number">1</span>][j + <span class="number">1</span>]) ? valueTable[i + <span class="number">1</span>][j] : valueTable[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 记录路径信息</span></span><br><span class="line">			pathTable[i][j] = (valueTable[i + <span class="number">1</span>][j] &lt; valueTable[i + <span class="number">1</span>][j + <span class="number">1</span>]) ? j : j + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回最终结果,自底向上</span></span><br><span class="line">	<span class="keyword">return</span> valueTable[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印最短路径</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printShortestPath</span><span class="params">(<span class="type">int</span> triangle[ROWS][MAX_COLS], <span class="type">int</span> pathTable[ROWS][MAX_COLS])</span> &#123;</span><br><span class="line">	<span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最短路径: %d&quot;</span>, triangle[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; ROWS; i++) &#123;</span><br><span class="line">		<span class="type">int</span> col = pathTable[i - <span class="number">1</span>][row];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; -&gt; %d&quot;</span>, triangle[i][col]);</span><br><span class="line">		row = col;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> triangle[ROWS][MAX_COLS] = &#123;</span><br><span class="line">		&#123;<span class="number">2</span>&#125;,</span><br><span class="line">		&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">		&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">11</span>&#125;,</span><br><span class="line">		&#123;<span class="number">12</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> valueTable[ROWS][MAX_COLS];</span><br><span class="line">	<span class="type">int</span> pathTable[ROWS][MAX_COLS];</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> result = minimumTotal(triangle, valueTable, pathTable);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最小路径和: %d\n&quot;</span>, result);</span><br><span class="line">	</span><br><span class="line">	printShortestPath(triangle, pathTable);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.<strong>LCS Promblem</strong>(最长公共子序列)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算最长公共子序列的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lcs</span><span class="params">(<span class="type">char</span> X[], <span class="type">char</span> Y[], <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="type">int</span> dp[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化状态表</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">			dp[i][j] = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 填充动态规划表</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">				dp[i][j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (X[i - <span class="number">1</span>] == Y[j - <span class="number">1</span>])<span class="comment">//最后一个相等</span></span><br><span class="line">				dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				dp[i][j] = (dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>]) ? dp[i - <span class="number">1</span>][j] : dp[i][j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> X[] = <span class="string">&quot;ABCBDABAABCDBABDDCBABDBCA&quot;</span>;</span><br><span class="line">	<span class="type">char</span> Y[] = <span class="string">&quot;BDCABAABDBCBDABDAAADCABC&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> m = <span class="keyword">sizeof</span>(X) / <span class="keyword">sizeof</span>(X[<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="keyword">sizeof</span>(Y) / <span class="keyword">sizeof</span>(Y[<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> result = lcs(X, Y, m, n);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最长公共子序列的长度: %d\n&quot;</span>, result);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子段和问题的多算法实现</title>
    <url>/2023/12/19/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%9A%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="最大子段和问题的多算法实现"><a href="#最大子段和问题的多算法实现" class="headerlink" title="最大子段和问题的多算法实现"></a>最大子段和问题的多算法实现</h3><p>1.BF</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">maxSubarrayBruteforce</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxSum = INT_MIN;</span><br><span class="line">    <span class="type">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> endIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//n种可能</span></span><br><span class="line">        <span class="type">int</span> currentSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++) &#123; <span class="comment">//每种可能每次从j=i开始</span></span><br><span class="line">            currentSum += arr[j];</span><br><span class="line">            <span class="keyword">if</span> (currentSum &gt; maxSum) &#123; <span class="comment">//每次加法后存储最大值</span></span><br><span class="line">                maxSum = currentSum;</span><br><span class="line">                startIndex = i;	<span class="comment">//求到最大后存储当前开始和结束标签</span></span><br><span class="line">                endIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大子段和: %d\n&quot;</span>, maxSum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大子段: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = startIndex; k &lt;= endIndex; k++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    maxSubarrayBruteforce(arr, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  暴力解法的思路是枚举所有可能的子段，计算它们的和，然后找出最大的和。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>2.D&amp;C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求三个数中的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;= c)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;= a &amp;&amp; b &gt;= c)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在跨越中点的情况下找到最大子段和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxCrossingSum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> leftSum = INT_MIN;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid; i &gt;= low; i--) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; leftSum)</span><br><span class="line">            leftSum = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rightSum = INT_MIN;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= high; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; rightSum)</span><br><span class="line">            rightSum = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftSum + rightSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归函数，找到数组的最大子段和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxSubarraySum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low == high)</span><br><span class="line">        <span class="keyword">return</span> arr[low];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归求解左右子数组的最大子段和</span></span><br><span class="line">    <span class="type">int</span> leftMax = maxSubarraySum(arr, low, mid);</span><br><span class="line">    <span class="type">int</span> rightMax = maxSubarraySum(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">    <span class="type">int</span> crossMax = maxCrossingSum(arr, low, mid, high);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回左右子数组最大子段和以及跨越中点的最大子段和中的最大值</span></span><br><span class="line">    <span class="keyword">return</span> max(leftMax, rightMax, crossMax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = maxSubarraySum(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大子段和: %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  最大子段和问题也可以使用分治法来解决。</span></span><br><span class="line"><span class="comment">  分治法的基本思想是将问题划分为较小的子问题，</span></span><br><span class="line"><span class="comment">  然后递归地解决这些子问题，</span></span><br><span class="line"><span class="comment">  最后将子问题的解合并得到原问题的解。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>3.DP</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxSubarraySum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxEndingHere = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> maxSoFar = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 在当前位置选择要么以前一个位置的子数组结束，要么从当前位置重新开始</span></span><br><span class="line">        maxEndingHere = max(arr[i], maxEndingHere + arr[i]);</span><br><span class="line">        <span class="comment">//最后一个maxEndingHere可能比上一个小了，故不能直接返回maxEndingHere，而要设置一个maxSoFar存当前最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新到目前为止的最大子段和</span></span><br><span class="line">        maxSoFar = max(maxSoFar, maxEndingHere);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxSoFar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = maxSubarraySum(arr, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大子段和: %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>BF</tag>
        <tag>分治</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程导论概念</title>
    <url>/2024/01/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="第1章-软件工程学概述"><a href="#第1章-软件工程学概述" class="headerlink" title="第1章 软件工程学概述"></a>第1章 软件工程学概述</h3><h4 id="软件危机：计算机软件的开发和维护过程中所遇到的一系列严重问题。"><a href="#软件危机：计算机软件的开发和维护过程中所遇到的一系列严重问题。" class="headerlink" title="软件危机：计算机软件的开发和维护过程中所遇到的一系列严重问题。"></a>软件危机<strong>：</strong>计算机软件的开发和维护过程中所遇到的一系列严重问题。</h4><p><strong>软件危机的典型表现：</strong></p>
<ol>
<li><p>对软件开发成本和进度的估计常常很不准确；</p>
</li>
<li><p>用户对完成的软件系统不满意的现象经常发生；</p>
</li>
<li><p>软件产品的质量往往靠不住；</p>
</li>
<li><p>软件常常是不可维护的；</p>
</li>
<li><p>软件通常没有适当的文档资料；</p>
</li>
<li><p>软件成本在计算机系统总成本中所占的比例逐年上升；</p>
</li>
<li><p>软件开发生产率提高的速度跟不上计算机应用的发展趋势。</p>
</li>
</ol>
<h4 id="产生软件危机的原因"><a href="#产生软件危机的原因" class="headerlink" title="产生软件危机的原因"></a>产生软件危机的原因</h4><ol>
<li><p>软件本身特点造成；对于计算机系统来说，软件是逻辑部件，软件开发过程没有统一的、公认的方法论和规范指导，造成软件维护困难。</p>
</li>
<li><p>软件开发与维护的方法不正确。对软件产品缺乏正确认识，没有真正理解软件产品是一个完整的配置组成。造成开发中制定计划盲目、编程草率，不考虑维护工作的必要性。</p>
</li>
</ol>
<p><strong>主要表现：</strong></p>
<ol>
<li><p>忽视软件需求分析；</p>
</li>
<li><p>认为软件开发就是写程序并使之运行；</p>
</li>
<li><p>轻视软件维护；</p>
</li>
</ol>
<h4 id="解决软件危机的途径"><a href="#解决软件危机的途径" class="headerlink" title="解决软件危机的途径"></a>解决软件危机的途径</h4><ol>
<li><p>推广使用在实践中总结出来的开发软件的成功技术和方法，并研究探索更有效的技术和方法；</p>
</li>
<li><p>开发和使用更好的软件工具<strong>；</strong></p>
</li>
<li><p>良好的组织管理措施。</p>
</li>
</ol>
<h4 id="软件工程的介绍"><a href="#软件工程的介绍" class="headerlink" title="软件工程的介绍"></a>软件工程的介绍</h4><p>早期：软件工程就是为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。</p>
<p>1993年IEEE：软件工程是</p>
<ol>
<li>把系统的、规范的、可度量的途径应用于软件开发、运行和维护过程；</li>
<li>研究（1）中提到的途径。</li>
</ol>
<h4 id="软件工程的本质特性："><a href="#软件工程的本质特性：" class="headerlink" title="软件工程的本质特性："></a>软件工程的本质特性：</h4><ol>
<li><p>软件工程关注于大型程序的构造；</p>
</li>
<li><p>软件工程的中心课题是控制复杂性；</p>
</li>
<li><p>软件经常变化；</p>
</li>
<li><p>开发软件的效率非常重要；</p>
</li>
<li><p>和谐地合作是软件开发的关键；</p>
</li>
<li><p>软件必须有效地支持它的用户；</p>
</li>
<li><p>在软件工程领域中是由具有一种文化背景的人替具有另一种文化背景的人创造产品。</p>
</li>
</ol>
<h4 id="软件工程的基本原理"><a href="#软件工程的基本原理" class="headerlink" title="软件工程的基本原理"></a>软件工程的基本原理</h4><ol>
<li><p>用分阶段的生命周期计划严格管理；</p>
</li>
<li><p>坚持进行阶段评审；</p>
</li>
<li><p>实行严格的产品控制；</p>
</li>
<li><p>采用现代程序设计技术；</p>
</li>
<li><p>结果能清楚地审查；</p>
</li>
<li><p>开发小组的人员应该少而精；</p>
</li>
<li><p>承认不断改进软件工程实践的必要性。</p>
</li>
</ol>
<h4 id="软件工程方法学"><a href="#软件工程方法学" class="headerlink" title="软件工程方法学"></a>软件工程方法学</h4><p><strong>概念：</strong>通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学（Methodology），也称为范型（Paradigm）。</p>
<p><strong>软件工程方法学的三要素</strong>：方法、工具和过程</p>
<p><strong>1.</strong> <strong>传统方法学</strong></p>
<p><strong>也称为生命周期方法学或结构化范型。</strong></p>
<p><strong>结构化方法（Structure Method）有：</strong></p>
<ol>
<li><p>结构化设计方法（SD）；</p>
</li>
<li><p>结构化分析方法（SA）；</p>
</li>
<li><p>结构化分析与设计技术（SADT）</p>
</li>
<li><p>JACKSON方法</p>
</li>
<li><p>WARNIER方法</p>
</li>
</ol>
<p><strong>2.</strong> <strong>面向对象方法学</strong></p>
<p><strong>把数据和对数据的操作紧密结合起来的方法，模拟人类认识世界解决问题的方法和过程。</strong></p>
<p><strong>面向对象的方法</strong>&#x3D;对象（属性与服务的封装）+分类+继承+用消息通信</p>
<h4 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h4><p>指软件从提出到最终被淘汰的这个存在期。</p>
<ol>
<li>软件定义；</li>
</ol>
<p>​     A.问题定义 B.可行性研究 C.需求分析</p>
<ol start="2">
<li>软件开发；</li>
</ol>
<p>​     D.总体设计 E.详细设计</p>
<p>​     F.编码和单元测试  G.综合测试</p>
<ol start="3">
<li>运行维护。</li>
</ol>
<p><strong>软件生命周期各个阶段：</strong></p>
<p>  1.问题定义；</p>
<p>  2.可行性研究；</p>
<p>  3.需求分析；</p>
<p>  4.总体设计（概要设计）；</p>
<p>  5.详细设计；</p>
<p>  6.编码与单元测试；</p>
<p>  7.综合测试；</p>
<p>  8.维护。</p>
<p><strong>问题定义报告的内容包括：</strong></p>
<ol>
<li><p>软件项目标题；</p>
</li>
<li><p>软件目标；</p>
</li>
<li><p>软件用户对象；</p>
</li>
<li><p>软件规模。</p>
</li>
</ol>
<h4 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h4><p>为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。</p>
<p>使用资源将输入转化为输出的活动所构成的系统。</p>
<p><strong>瀑布模型:</strong></p>
<ol>
<li><p>阶段间具有顺序性和依赖性</p>
</li>
<li><p>推迟实现的观点</p>
</li>
<li><p>质量保证的观点</p>
</li>
</ol>
<p>优点：采用规范的方法；严格规定每个阶段提交的文档；要求每个阶段交出的产品必须经过验证。</p>
<p><strong>快速原型模型:</strong></p>
<p>优点：不带反馈环，基本上是线性顺序进行。</p>
<p><strong>增量模型:</strong></p>
<p>优点：能较短时间内提交可完成部分工作的产品；可以使用户有充裕的时间学习和适应新产品。</p>
<h3 id="第2章-可行性研究"><a href="#第2章-可行性研究" class="headerlink" title="第2章 可行性研究"></a>第2章 可行性研究</h3><p>可行性研究的<strong>目的</strong>是：用最小的代价在尽可能短的时间内确定问题是否有解，以及是否值得去解。</p>
<h4 id="可行性研究的内容："><a href="#可行性研究的内容：" class="headerlink" title="可行性研究的内容："></a>可行性研究的内容：</h4><ol>
<li><p>技术可行性:使用现有的技术能否实现这个系统</p>
</li>
<li><p>经济可行性:系统的经济效益能否超过它的开发成本</p>
</li>
<li><p>操作可行性:操作可行性评价系统运行后会引起的各方面变化</p>
</li>
<li><p>社会可行性</p>
</li>
</ol>
<h4 id="可行性研究的步骤"><a href="#可行性研究的步骤" class="headerlink" title="可行性研究的步骤"></a>可行性研究的步骤</h4><ol>
<li><p>复查系统规模和目标；</p>
</li>
<li><p>研究目前正在使用的系统；</p>
</li>
<li><p>导出新系统的高层逻辑模型（数据流图、数据字典）；</p>
</li>
<li><p>重新定义问题； </p>
</li>
<li><p>导出和评价供选择的解法（物理解决方案）；</p>
</li>
<li><p>推荐行动方案；</p>
</li>
<li><p>草拟开发计划；</p>
</li>
<li><p>书写文档提交审查。</p>
</li>
</ol>
<h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><p>数据字典：对数据流图中包含的所有元素的定义的集合；</p>
<p>可行性研究阶段，数据流图与数据字典共同构成系统的逻辑模型。</p>
<p><strong>数据字典应该对下列元素进行定义：</strong></p>
<ol>
<li><p>数据流；</p>
</li>
<li><p>数据元素（数据流分量）；</p>
</li>
<li><p>数据存储；</p>
</li>
<li><p>处理。</p>
</li>
</ol>
<h4 id="成本估计"><a href="#成本估计" class="headerlink" title="成本估计"></a>成本估计</h4><ol>
<li><p>代码行技术:软件成本 <strong>&#x3D;</strong> 每行代码的平均成本×估计的源代码总行数</p>
</li>
<li><p>任务分解技术</p>
</li>
<li><p>自动估计成本技术</p>
</li>
</ol>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h4 id="需求分析的任务"><a href="#需求分析的任务" class="headerlink" title="需求分析的任务"></a>需求分析的任务</h4><p><strong>确定对系统的综合要求</strong></p>
<ol>
<li><p>功能需求</p>
</li>
<li><p>性能需求</p>
</li>
<li><p>可靠性和可用性需求</p>
</li>
<li><p>出错处理需求</p>
</li>
<li><p>接口需求</p>
</li>
<li><p>约束</p>
</li>
<li><p>逆向需求 </p>
</li>
<li><p>将来可能提出的要求</p>
</li>
</ol>
<h4 id="与用户沟通获取需求的方法"><a href="#与用户沟通获取需求的方法" class="headerlink" title="与用户沟通获取需求的方法"></a>与用户沟通获取需求的方法</h4><p><strong>访谈</strong>:</p>
<ol>
<li><p><strong>正式访谈</strong>：系统分析员提出事先准备好的问题。</p>
</li>
<li><p><strong>非正式访谈</strong>：提出一些用户可以自由回答的开放性问题，鼓励被访者说出自己的想法。</p>
</li>
</ol>
<p><strong>面向数据流自顶向下求精</strong></p>
<p><strong>简易的应用规格说明技术</strong></p>
<p><strong>快速建立软件原型</strong> </p>
<h4 id="分析建模与规格说明"><a href="#分析建模与规格说明" class="headerlink" title="分析建模与规格说明"></a><strong>分析建模与规格说明</strong></h4><p><strong>分析建模</strong></p>
<ol>
<li>实体联系图</li>
<li>数据流图</li>
<li>状态转换图</li>
</ol>
<h4 id="数据规范化"><a href="#数据规范化" class="headerlink" title="数据规范化"></a><strong>数据规范化</strong></h4><ol>
<li>第一范式</li>
<li>第二范式</li>
<li>第三范式</li>
</ol>
<h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><h4 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h4><ol>
<li><p><strong>设想供选择的方案</strong> </p>
</li>
<li><p><strong>选择合理的方案</strong></p>
</li>
</ol>
<p>​	对每个合理的方案要提供：</p>
<pre><code>  A．系统流程图
  
  B．组成系统的物理元素清单
  
   C．成本/效益分析
  
  D．实现这个系统的进度计划
</code></pre>
<ol start="3">
<li><p><strong>推荐最佳方案</strong></p>
</li>
<li><p><strong>功能分解</strong></p>
</li>
<li><p><strong>设计软件结构</strong></p>
</li>
<li><p><strong>数据库设计</strong></p>
</li>
<li><p><strong>制定测试计划</strong></p>
</li>
<li><p><strong>书写文档</strong></p>
<p>   A．系统说明</p>
<p>   B. 用户手册</p>
<p>   C．测试计划</p>
<p>   D．详细的实现计划</p>
</li>
</ol>
<p>​	  E．数据库设计结果</p>
<ol start="9">
<li><strong>审查和复审</strong></li>
</ol>
<h4 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h4><p>模块化</p>
<p>抽象</p>
<p>逐步求精</p>
<p>信息隐蔽和局部化</p>
<h5 id="模块独立："><a href="#模块独立：" class="headerlink" title="模块独立："></a>模块独立：</h5><p><strong>模块的独立性很重要，因为：</strong></p>
<ol>
<li><p>有效的模块化的软件比较容易开发出来;</p>
</li>
<li><p>独立的模块比较容易测试和维护。</p>
</li>
</ol>
<p><strong>模块独立程度可以由两个定性标准度量</strong>：耦合与内聚。</p>
<p><strong>耦合</strong></p>
<p><strong>耦合</strong>：指软件结构内不同模块彼此之间相互依赖（连接）的紧密程度。</p>
<p><strong>模块的偶合分四类：</strong></p>
<ol>
<li><strong>数据耦合</strong></li>
</ol>
<p>​	 两个模块之间只是通过参数交换信息，而且交换的信息仅仅是数据。</p>
<pre><code> 数据耦合是**最低程度**的耦合。 
</code></pre>
<ol start="2">
<li><strong>控制耦合</strong></li>
</ol>
<p>​	两个模块之间所交换的信息包含控制信息。</p>
<pre><code> 控制耦合是中等程度的耦合。
</code></pre>
<ol start="3">
<li><strong>公用耦合</strong></li>
</ol>
<p>​	两个或多个模块通过一个公共区相互作用时的耦合。</p>
<p>​	公共区可以是：全程数据区、共享通信区、内存公共覆盖区、任何介质上的文件、物理设备等。</p>
<p>​	软件结构中存在大量的公用耦合时会给诊断错误带来困难。 </p>
<ol start="4">
<li><strong>内容耦合</strong></li>
</ol>
<p>​	一个模块与另一个模块的内容直接发生联系。</p>
<p>​	内容耦合对维护会带来严重的困难。 </p>
<p>​	内容耦合是<strong>最高程度</strong>的耦合，应该避免采用。</p>
<p><strong>应追求尽可能松散耦合，这样模块间的联系就越小，模块的独立性就越强，对模块的测试、维护就越容易。</strong></p>
<p><strong>尽量使用数据耦合，少用控制耦合，限制公用耦合，完全不用内容偶合</strong>。</p>
<p><strong>内聚</strong></p>
<p><strong>内聚</strong>：一个模块内部各个元素彼此结合的紧密程度。</p>
<ol>
<li><p>功能内聚 ：<strong>功能内聚是最高程度的内聚</strong>。</p>
</li>
<li><p>顺序内聚</p>
<p><code>高内聚</code></p>
<hr>
</li>
<li><p>通信内聚</p>
</li>
<li><p>过程内聚</p>
<p><code>中内聚</code></p>
<hr>
</li>
<li><p>时间内聚</p>
</li>
<li><p>逻辑内聚</p>
</li>
<li><p>偶然内聚：<strong>偶然内聚是最差的一种内聚。</strong></p>
<p><code>地内聚</code></p>
</li>
</ol>
<p><strong>力求做到高内聚，尽量少用中内聚，不用低内聚。</strong></p>
<h4 id="启发式规则"><a href="#启发式规则" class="headerlink" title="启发式规则"></a>启发式规则</h4><ol>
<li><p>改进软件结构提高模块独立性</p>
</li>
<li><p>模块规模应该适中 </p>
</li>
<li><p>深度、宽度、扇出和扇入都应适当</p>
<p>深度：软件结构中控制的层数；</p>
<p>宽度：软件结构内同一个层次上的模块总数的最大值；</p>
<p>扇出：一个模块直接控制（调用）其它模块的数目；</p>
<p>扇入：一个模块被其它模块调用的数目</p>
</li>
<li><p>模块的作用域应该在控制域之内</p>
</li>
</ol>
<p>​	作用域：受该模块内一个判定影响的所有模块的集合。</p>
<p>​	控制域：模块本身以及所有从属于它的模块的集合</p>
<ol start="5">
<li><p>力争降低模块接口的复杂度</p>
</li>
<li><p>设计单入口、单出口的模块 </p>
</li>
<li><p>模块功能应该可以预测</p>
</li>
</ol>
<h4 id="面向数据流的设计方法"><a href="#面向数据流的设计方法" class="headerlink" title="面向数据流的设计方法"></a>面向数据流的设计方法</h4><p><strong>数据流可以分为两种类型：</strong></p>
<ol>
<li>变换型数据流</li>
<li>事务型数据流</li>
</ol>
<h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a><strong>详细设计</strong></h3><p><strong>目标</strong>：确定如何具体实现所要求的系统。</p>
<h4 id="结构程序设计"><a href="#结构程序设计" class="headerlink" title="结构程序设计"></a><strong>结构程序设计</strong></h4><p><strong>结构程序设计</strong>： 一种设计程序的技术，它采用自顶向下逐步求精的设计方法和单入口单出口的控制结构。  一种设计程序的技术，它采用自顶向下逐步求精的设计方法和单入口单出口的控制结构。 </p>
<p><strong>使用结构程序设计技术的好处：</strong></p>
<ol>
<li><p>提高软件开发工程的成功率和生产率；</p>
</li>
<li><p>系统有清晰的层次结构，容易阅读理解；</p>
</li>
<li><p>单入口单出口的控制结构，容易诊断纠正；</p>
</li>
<li><p>模块化可以使得软件可以重用；</p>
</li>
<li><p>程序逻辑结构清晰，有利于程序正确性证明。</p>
</li>
</ol>
<p><strong>经典的结构程序设计</strong>：只允许使用顺序、<code>IF_THEN_ELSE</code>选择和<code>DO_WHILE</code>循环；</p>
<p><strong>扩展的结构程序设计</strong>：除了三种基本控制结构，还使用<code>DO_CASE</code>和<code>DO_UNTIL</code>循环；</p>
<p><strong>修正的结构程序设计</strong>：除了三种基本控制结构和两种扩充结构，还使用<code>BREAK</code>等结构。</p>
<h4 id="人机界面设计"><a href="#人机界面设计" class="headerlink" title="人机界面设计"></a><strong>人机界面设计</strong></h4><p><strong>设计问题</strong></p>
<ol>
<li><p>系统响应时间；</p>
</li>
<li><p>用户帮助；</p>
</li>
<li><p>出错信息处理；</p>
</li>
<li><p>命令交互</p>
</li>
</ol>
<p><strong>人机界面设计指南</strong></p>
<ol>
<li><p>一般交互指南；</p>
</li>
<li><p>信息显示指南；</p>
</li>
<li><p>数据输入指南</p>
</li>
</ol>
<h4 id="过程设计的工具"><a href="#过程设计的工具" class="headerlink" title="过程设计的工具"></a><strong>过程设计的工具</strong></h4><p><strong>程序流程图</strong></p>
<p><strong>程序流程图的缺点</strong>：</p>
<ol>
<li><p>程序流程图本质上不是逐步求精的好工具，它诱使程序员过早地考虑程序的控制流程，而不去考虑程序的全局结构。</p>
</li>
<li><p>程序流程图中用箭头代表控制流，因此程序员不受任何约束，可以完全不顾结构程序设计的精神，随意转移控制。</p>
</li>
<li><p>程序流程图不易表示数据结构。</p>
</li>
</ol>
<p><strong>盒图</strong>（N-S图）</p>
<p><strong>PAD图</strong></p>
<p><strong>判定表</strong></p>
<p><strong>判定树</strong></p>
<p><strong>过程设计语言</strong></p>
<h4 id="面向数据结构的设计方法"><a href="#面向数据结构的设计方法" class="headerlink" title="面向数据结构的设计方法"></a>面向数据结构的设计方法</h4><p><strong>Jackson图</strong></p>
<p><strong>改进的Jackson图</strong> </p>
<h4 id="程序复杂度的定量度量"><a href="#程序复杂度的定量度量" class="headerlink" title="程序复杂度的定量度量"></a>程序复杂度的定量度量</h4><p><strong>McCabe方法</strong>:</p>
<ol>
<li><p>流图:仅描绘程序的控制流程</p>
</li>
<li><p>计算环形复杂度的方法</p>
<p>   a.环形复杂度 V（G）等于流图中的区域数；</p>
<p>   b.环形复杂度 V（G）＝E－N+2，其中E是流图中边的条数，N是结点数；</p>
<p>   c.环形复杂度 V（G）＝P＋1，其中P为流图中判定结点的数目。</p>
</li>
<li><p>环形复杂度的用途</p>
<p>对测试难度的一种定量度量，也能对软件最终的可靠性给出某种预测。</p>
</li>
</ol>
<p><strong>Halstead方法</strong>:</p>
<p><strong>根据程序中运算符和操作数的总数来度量程序复杂度。</strong>  </p>
<p>​      <code>N = N1 + N2</code></p>
<p>其中：N定义为程序长度；</p>
<p>​      N1为程序中运算符出现的总次数；</p>
<p>​      N2为操作数出现的总次数。 </p>
<p><strong>Halstead给出预测程序长度的公式为：</strong></p>
<p>​      <code>H = n1log2n1 + n2log2n2</code></p>
<p>其中：H定义为程序预测长度；</p>
<p>​      n1为程序中使用的不同运算符（包括关键字）的个数；</p>
<p>​      n2为程序中使用的不同操作数（变量和常量）的个数。  </p>
<blockquote>
<p>程序的预测长度H和实际程序长度N非常接近。</p>
</blockquote>
<p><strong>Halstead还给出了预测程序中包含错误的个数的公式：</strong></p>
<p>​     <code>E = N log2(n1+n2) / 3000</code></p>
<h3 id="第7章-实现"><a href="#第7章-实现" class="headerlink" title="第7章 实现"></a>第7章 实现</h3><p><strong>编码和测试统称为实现。</strong></p>
<p>编码：把软件设计结果翻译成程序。</p>
<p>测试：检测程序并改正错误的过程。</p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p><strong>选择程序设计语言</strong></p>
<ol>
<li><p>汇编语言;</p>
</li>
<li><p>高级语言。</p>
</li>
</ol>
<p><strong>从应用特点看，高级语言可分为：</strong></p>
<ol>
<li>基础语言</li>
<li>结构化语言</li>
<li>专用语言</li>
</ol>
<p><strong>选择一种编程语言的理论标准：</strong></p>
<ol>
<li><p>有理想的模块化机制；</p>
</li>
<li><p>可读性好的控制结构和数据结构；</p>
</li>
<li><p>便于调试和提高软件可靠性；</p>
</li>
<li><p>编译程序发现程序错误的能力强；</p>
</li>
<li><p>有良好的独立编译机制。</p>
</li>
</ol>
<p><strong>主要的实用标准：</strong></p>
<ol>
<li><p>系统用户要求</p>
</li>
<li><p>可以使用的编译程序</p>
</li>
<li><p>可以得到的软件工具</p>
</li>
<li><p>工程规模</p>
</li>
<li><p>程序员知识</p>
</li>
<li><p>软件可移植性要求</p>
</li>
<li><p>软件的应用领域</p>
</li>
</ol>
<p><strong>编码风格：</strong></p>
<p>1.程序内部的文档</p>
<p>2.数据说明</p>
<p>3.语句构造</p>
<p>4.输入&#x2F;输出</p>
<p>5.效率</p>
<p>​	A程序运行时间</p>
<p>​	B．存储器效率</p>
<p>​	C．输入&#x2F;输出效率</p>
<h4 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h4><p><strong>软件测试的目标</strong></p>
<p>有关测试的一些规则：</p>
<ol>
<li><p>测试是为了发现程序中的错误而执行程序的过程；</p>
</li>
<li><p>好的测试方案是极可能发现迄今为止尚未发现的错误的测试方案；</p>
</li>
<li><p>成功的测试是发现了至今为止尚未发现的错误的测试。</p>
</li>
</ol>
<p><strong>软件测试准则</strong></p>
<ol>
<li><p>所有测试都应该能追溯到用户需求；</p>
</li>
<li><p>应该远在测试前就制定出测试计划；</p>
</li>
<li><p>把Pareto原理应用到软件测试中；</p>
</li>
<li><p>应该从“小规模”测试开始，并逐步进行“大规模”测试；</p>
</li>
<li><p>穷举测试是不可能的；</p>
</li>
<li><p>为了达到最佳测试效果，应该由独立的第三方从事测试工作。</p>
</li>
</ol>
<p><strong>测试方法</strong></p>
<p><strong>黑盒测试</strong>：如果已经知道软件应该具有的功能，可以通过测试来检验是否每个功能都能正常使用，这种测试称黑盒测试。也称功能测试。</p>
<p><strong>白盒测试</strong>：也称结构测试。如果知道软件内部工作过程，可以通过测试来检验软件内部动作是否按照规格说明书的规定正常进行，这种测试称为白盒测试。</p>
<p><strong>软件测试的步骤</strong></p>
<ol>
<li><p>模块测试</p>
</li>
<li><p>子系统测试</p>
</li>
<li><p>系统测试</p>
</li>
<li><p>验收测试</p>
</li>
<li><p>平行运行</p>
</li>
</ol>
<h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>最小的单元-模块</p>
<p><strong>测试重点</strong></p>
<ol>
<li>测试重点</li>
<li>模块接口</li>
<li>局部数据结构</li>
<li>重要的执行路径</li>
<li>出错处理通路</li>
<li>边界条件</li>
</ol>
<p><strong>代码审查</strong></p>
<p><strong>审查小组：</strong></p>
<ol>
<li><p>组长；</p>
</li>
<li><p>程序的设计者；</p>
</li>
<li><p>程序的编写者；</p>
</li>
<li><p>程序的测试者。</p>
</li>
</ol>
<p><strong>计算机测试</strong></p>
<ol>
<li><p>驱动程序:相当于一个“主程序”，用来把测试数据传送给被测试的模块，并打印有关结果。</p>
</li>
<li><p>存根程序:用来代替被测试模块所调用的模块，相当于“虚拟子程序”。</p>
</li>
</ol>
<h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p><strong>集成测试是组装软件的系统化技术，它将经过单元测试的模块联系在一起进行测试。</strong></p>
<p><strong>由模块组装成程序时有两种方法：</strong></p>
<ol>
<li><p><strong>非渐增式测试方法</strong>:先分别测试每个模块，再把所有模块按设计要求放在一起结合成所要的程序。</p>
</li>
<li><p><strong>渐增式测试方法</strong>:每次增加一个待测试模块，把它同已经测试好的那些模块结合起来进行测试，反复进行直到完成所有模块测试的方法。</p>
</li>
</ol>
<p><strong>使用渐增式测试方法把模块结合到软件系统中去时，有自顶向下和自底向上两种集成方法。</strong></p>
<p><strong>一、自顶向下集成</strong></p>
<p>自顶向下集成是一种递增的装配软件结构的方法，这种方法应用非常广泛。<strong>它需要存根程序，但是不需要驱动程序。</strong></p>
<p>这种方法的思想是：从主控模块（主程序）开始，沿软件的控制层次向下移动，逐渐把各个模块结合起来。 </p>
<p><strong>在自顶向下结合方法中，如何将所有模块组装到软件结构中，又有两种方法：</strong></p>
<ol>
<li><p>深度优先策略</p>
</li>
<li><p>宽度优先策略</p>
</li>
</ol>
<p><strong>二、自底向上集成</strong></p>
<p>自底向上集成方法是从软件结构最底层模块开始进行组装和测试，<strong>它与自顶向下结合方法相反，需要驱动程序，不需要存根程序。</strong></p>
<p><strong>改进：</strong></p>
<ol>
<li><p>改进的自顶向下测试方法；</p>
</li>
<li><p>混合法。</p>
</li>
</ol>
<p><strong>回归测试</strong></p>
<p><strong>指重新执行已经做过的部分测试。</strong></p>
<p><strong>回归测试用于保证由于调试或其他原因引起的程序变化，不会导致额外错误的测试活动。</strong></p>
<hr>
<h3 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h3><p><strong>确认测试的范围</strong>：</p>
<ol>
<li>也称为验收测试，目标是验证软件的有效性。</li>
<li>如果软件的功能和性能符合用户的期待，软件就是有效的。</li>
<li>软件规格说明书是进行确认测试的基础。</li>
</ol>
<p><strong>确认测试的主要特点及内容有：</strong></p>
<ol>
<li><p>某些已经测试过的纯粹技术性的测试项可能不需要再次测试，而对用户特别感兴趣的功能或性能，可能需要增加一些测试；</p>
</li>
<li><p>通常确认测试主要使用实际生产中的数据来进行测试；</p>
</li>
<li><p>确认测试必须有用户的积极参与，甚至以用户为主，可能需要进行一些与用户使用步骤有关的测试。</p>
</li>
</ol>
<p><strong>确认测试一般使用黑盒测试法。</strong></p>
<p><strong>软件配置复查</strong>:</p>
<p>目的：保证软件配置的所有成分都齐全，质量符合要求，文档与程序完全一致，而且已经编好目录。</p>
<p><strong>Alpha和Beta测试</strong></p>
<p><strong>Alpha测试</strong>：用户在<strong>开发者的场所</strong>进行测试，并且在开发者的指导下进行，测试在受控环境中进行，开发者记录发现的错误和问题；</p>
<p><strong>Beta测试</strong>：用户在<strong>一个或多个客户场所</strong>进行测试，不受开发者控制，测试者记录发现的问题和错误，定期将问题报告发送给开发者。</p>
<hr>
<h4 id="白盒测试技术"><a href="#白盒测试技术" class="headerlink" title="白盒测试技术"></a>白盒测试技术</h4><p><strong>逻辑覆盖</strong></p>
<ol>
<li><p><strong>语句覆盖</strong>:设计的测试用例能使程序中每条语句至少执行一次。</p>
</li>
<li><p><strong>判定覆盖</strong>:选取足够的测试用例，使得程序中每个判断的可能结果都至少执行一次，也就是说使程序的每个判断分支至少通过一次。</p>
</li>
<li><p><strong>条件覆盖</strong>:选择足够的测试用例，使得程序中每个判定表达式的每个条件都取到各种可能的结果。</p>
</li>
<li><p><strong>判定&#x2F;条件覆盖</strong>:选取足够的测试用例使得同时满足判定覆盖和条件覆盖的要求。</p>
</li>
<li><p><strong>条件组合覆盖</strong>:选取足够的测试用例，使得每个判定表达式中条件的各种可能的组合都至少出现一次。</p>
</li>
<li><p><strong>点覆盖</strong>:选取足够多的测试用例，使得程序执行路径至少经过程序图中每个节点一次。</p>
</li>
<li><p><strong>边覆盖</strong>:选取足够多的测试用例，使得程序执行路径至少经过程序图中每条边一次。</p>
</li>
<li><p><strong>路径覆盖</strong>:选取足够多的测试用例，使得程序的每条可能路径都至少执行一次。</p>
</li>
</ol>
<hr>
<h4 id="黑盒测试技术"><a href="#黑盒测试技术" class="headerlink" title="黑盒测试技术"></a>黑盒测试技术</h4><p><strong>等价类划分是一种黑盒测试技术。</strong></p>
<p><strong>用等价类划分设计测试用例时，主要分两步：划分等价类、确定测试用例。</strong></p>
<p><strong>边界值分析测试法属黑盒测试。</strong></p>
<p><strong>错误推测法在很大程度上靠直觉和经验进行。</strong></p>
<hr>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p><strong>调试是在测试发现错误之后排除错误的过程。</strong></p>
<p><strong>调试途径</strong>:</p>
<ol>
<li><p>蛮干法</p>
</li>
<li><p>回溯法</p>
</li>
<li><p>原因排除法</p>
</li>
</ol>
<hr>
<h4 id="软件可靠性"><a href="#软件可靠性" class="headerlink" title="软件可靠性"></a>软件可靠性</h4><p><strong>软件可靠性</strong>：是程序在给定的时间间隔内，按照规格说明书的规定成功地运行的概率。</p>
<p><strong>软件可用性</strong>：程序在给定的时间点，按照规格说明书的规定，成功地运行的概率。</p>
<p><strong>可靠性和可用性的区别</strong>：可靠性是在0到t时间间隔内，系统没有失效的概率。而可用性是在t时刻，系统是正常运行的概率。</p>
<p><strong>平均维修时间MTTR</strong>是修复一个故障平均需要用的时间，<strong>取决于</strong>维护人员的技术水平和对系统熟悉程度。</p>
<p><strong>平均无故障时间MTTF</strong>是系统按照规格说明书规定成功地运行的平均时间，<strong>取决于</strong>系统中潜伏的错误数量。 </p>
<p><strong>估计错误总数ET的方法</strong></p>
<ol>
<li><p>植入故障法</p>
</li>
<li><p>分别测试法</p>
</li>
</ol>
<hr>
<h3 id="第8章-维护"><a href="#第8章-维护" class="headerlink" title="第8章 维护"></a>第8章 维护</h3><p><strong>软件维护是软件生命周期的最后一个阶段。</strong></p>
<p><strong>任务</strong>：维护软件的正常运行，不断改进软件的性能和质量，为软件的进一步推广应用和更新替换做积极工作。  </p>
<p><strong>软件交付使用</strong> :</p>
<ol>
<li>软件验收测试以后，就标志着软件设计开发阶段的结束。</li>
<li>而软件交付用户使用，才真正标志漫长的维护阶段的开始。</li>
</ol>
<p><strong>软件交付使用的方式</strong></p>
<ol>
<li>直接方式</li>
</ol>
<p>​	优点：转换简单，费用最省。</p>
<p>​	缺点：风险大</p>
<ol start="2">
<li>并行方式</li>
</ol>
<p>​	优点：</p>
<pre><code>  A. 可以对系统进行全面测试，减少了新系统失灵带来的风险，因为旧系统也仍然存在；
  
  B．用户也能够有一段熟悉新系统的时间。
</code></pre>
<p>​	缺点：</p>
<pre><code> 所需费用较高，双系统要投入更多的人力财力。
</code></pre>
<ol start="3">
<li>逐步方式</li>
</ol>
<p><strong>软件维护的定义</strong>:在软件已经交付使用后，为了改正错误或满足新的需要而进行修改的过程。</p>
<p><strong>软件维护的原因</strong></p>
<ol>
<li><p>改正在特定使用条件下暴露出来的一些潜在程序错误或设计缺陷；</p>
</li>
<li><p>因在软件使用过程中数据环境发生变化（如所要处理的数据发生变化）或处理环境发生变化（如硬件或软件操作系统等发生变化），需要修改软件，以适应这种变化；</p>
</li>
<li><p>用户和数据处理人员在使用时常提出改进现有功能、增加新功能、以及改善总体性能的要求，为满足这些要求，需要修改软件。</p>
</li>
</ol>
<p><strong>软件维护的类型</strong></p>
<ol>
<li><p>改正性维护</p>
</li>
<li><p>适应性维护</p>
</li>
<li><p>完善性维护</p>
</li>
<li><p>预防性维护</p>
</li>
</ol>
<p><strong>完善性维护占软件维护工作的大部分。</strong></p>
<hr>
<h4 id="软件维护的特点"><a href="#软件维护的特点" class="headerlink" title="软件维护的特点"></a>软件维护的特点</h4><p><strong>结构化维护与非结构化维护的差别</strong>:</p>
<ol>
<li><strong>非结构化维护</strong></li>
</ol>
<p>​	软件配置的唯一成分是代码，维护从评价程序代码开始，对软件结构、数据结构、系统接口、设计约束等常产生误解，不能进行回归	测试，维护代价大。  </p>
<ol start="2">
<li><p><strong>结构化维护</strong></p>
<p>   有完整的软件配置，维护从评价设计文档开始，确定软件结构、性能和接口特点，现修改设计，接着修改代码，再进行回归测试。</p>
</li>
</ol>
<p><strong>软件维护的典型问题</strong>:</p>
<ol>
<li><p>如果维护时只有程序代码而没有注释说明，维护起来就相当困难；</p>
</li>
<li><p>由于软件维护阶段时间长，软件开发人员经常流动，所以在维护时，不可能所有的维护工作都依靠原来的开发人员。这会使得维护工作量增加；</p>
</li>
<li><p>软件没有足够的文档资料，或者程序修改后与文档资料不一致；</p>
</li>
<li><p>绝大多数软件在设计时没有考虑将来的修改，所以建议采用功能独立的模块化设计原则，增加软件的可维护性；</p>
</li>
<li><p>软件维护被许多人视为一种毫无吸引力的工作，因为维护工作常常受到挫折。</p>
</li>
</ol>
<hr>
<h4 id="软件维护过程"><a href="#软件维护过程" class="headerlink" title="软件维护过程"></a>软件维护过程</h4><ol>
<li><p>维护组织 </p>
</li>
<li><p>维护报告</p>
</li>
</ol>
<p>​	根据软件问题报告（维护要求），作出的软件修改报告包含的信息主要有：</p>
<p>​	1）满足维护要求表中提出的要求所需要的工作量；</p>
<p>​	2）维护要求的性质；</p>
<p>​	3）这项要求的优先次序；</p>
<p>​	4）与修改有关的事后数据（如测试数据等）。</p>
<ol start="3">
<li><p>维护的事件流 </p>
</li>
<li><p>保存维护记录</p>
</li>
</ol>
<p>​	程序标识源语句数；机器指令数；使用的程序设计语言；程序安装的日期；自安装以来程序运行次数；</p>
<ol start="5">
<li>评价维护活动</li>
</ol>
<p>​	1）每次程序运行平均失效的次数；</p>
<p>​	2）用于每一类维护活动的总人时数；</p>
<p>​	3）平均每个程序、每种维护类型所做的程序变动数；</p>
<p>​	4）维护过程中增加或删除一个源语句平均花费的人时数；</p>
<p>​	5）维护每种语言平均花费的人时数；</p>
<p>​	6）一张维护要求表的平均周转时间；</p>
<p>​	7）不同维护类型所占的百分比。</p>
<hr>
<h4 id="软件的可维护性"><a href="#软件的可维护性" class="headerlink" title="软件的可维护性"></a>软件的可维护性</h4><p><strong>决定软件可维护性的因素</strong>：</p>
<ol>
<li><p>可理解性</p>
</li>
<li><p>可测试性</p>
</li>
<li><p>可修改性</p>
</li>
<li><p>可移植性</p>
</li>
<li><p>可重用性</p>
</li>
</ol>
<p><strong>文档</strong>：影响软件可维护性的决定因素</p>
<ol>
<li><p><strong>用户文档</strong>：主要描述系统功能和使用方法，并不关心这些功能是怎样实现的。</p>
</li>
<li><p><strong>系统文档</strong>：描述系统设计、实现和测试等各方法的内容。</p>
</li>
<li><p><strong>用户文档</strong></p>
</li>
</ol>
<p>​    1）功能描述；</p>
<p>​    2）安装文档；</p>
<p>​    3）使用手册；</p>
<p>​    4）参考手册；</p>
<p>​    5）操作员指南；</p>
<ol start="2">
<li><strong>系统文档</strong></li>
</ol>
<p><strong>可维护性复审</strong></p>
<p><strong>测试结束时进行正式的可维护性复审，称为配置复审，目的是：保证软件配置的所有成分是完整的、一致的和可理解的。</strong></p>
<hr>
<h3 id="第9章-面向对象方法学引论"><a href="#第9章-面向对象方法学引论" class="headerlink" title="第9章 面向对象方法学引论"></a>第9章 面向对象方法学引论</h3><h4 id="面向对象方法学概述"><a href="#面向对象方法学概述" class="headerlink" title="面向对象方法学概述"></a>面向对象方法学概述</h4><p><strong>面向对象方法的优点</strong>:</p>
<ol>
<li><p>与人们习惯的思维方法一致；</p>
</li>
<li><p>稳定性好；</p>
</li>
<li><p>可重用性好；</p>
</li>
<li><p>较易开发大型软件产品；</p>
</li>
<li><p>可维护性好。</p>
</li>
</ol>
<p><strong>对象的特点</strong>:</p>
<ol>
<li><p>以数据为中心；</p>
</li>
<li><p>对象是主动的；</p>
</li>
<li><p>实现了数据封装；</p>
</li>
<li><p>本质上具有并行性；</p>
</li>
<li><p>模块独立性好。</p>
</li>
</ol>
<p><strong>对象是具有相同状态的一组操作的集合。</strong></p>
<p><strong>类就是对具有相同数据和相同操作的一组相似对象的定义</strong></p>
<p><strong>方法，是对象所能执行的操作。</strong></p>
<p><strong>消息就是用来请求对象执行某个处理或回答某些信息的要求。</strong></p>
<p><strong>属性，是类中定义的数据。</strong></p>
<p><strong>封装就是信息隐藏，通过封装对外界隐藏了对象的实现细节。</strong></p>
<p><strong>继承，是指能够直接获得已有的性质和特征，而不必重复定义它们。</strong></p>
<p><strong>多态性，指子类对象可以象父类对象那样使用，同样的消息既可以发送给父类对象，也可以发送给子类对象。</strong></p>
<p><strong>重载</strong>：1. 函数重载 2. 运算符重载</p>
<hr>
<p><strong>面向对象建模</strong></p>
<ol>
<li><p><strong>对象模型</strong>：描述系统的数据结构；</p>
</li>
<li><p><strong>动态模型</strong>：描述系统的控制结构；</p>
</li>
<li><p><strong>功能模型</strong>：描述系统的功能。</p>
</li>
</ol>
<p><strong>对象模型是最基本、最重要的。</strong></p>
<p><strong>泛化（继承）</strong>:</p>
<p><strong>1）普通泛化</strong></p>
<hr>
<h3 id="第11章-面向对象设计"><a href="#第11章-面向对象设计" class="headerlink" title="第11章 面向对象设计"></a>第11章 面向对象设计</h3><p><strong>面向对象设计的准则</strong>：</p>
<ol>
<li><p>模块化：对象就是模块。它把数据结构和操作（方法）紧密地结合在一起构成模块。</p>
</li>
<li><p>抽象：类实际上是一种抽象数据类型</p>
</li>
<li><p>信息隐蔽：信息隐蔽通过对象的封装性实现</p>
</li>
<li><p>弱耦合</p>
</li>
</ol>
<p>​	对象间的耦合有两大类：a.交互耦合 b.继承偶合</p>
<ol start="5">
<li><p>强内聚</p>
</li>
<li><p>可重用</p>
</li>
</ol>
<hr>
<h4 id="启发规则"><a href="#启发规则" class="headerlink" title="启发规则"></a>启发规则</h4><p><strong>1. 设计结果应该清晰易懂；</strong></p>
<p>​	影响的主要因素：1.用词一致；2.使用已有的协议；3.减少消息模式的数目；4.避免模糊的定义。</p>
<p><strong>2.一般—特殊结构的深度应适当</strong></p>
<p><strong>3. 设计简单的类</strong>：<strong>设计小而简单的类，便于开发和管理；</strong></p>
<p>​	<strong>注意几点：</strong></p>
<p>​	1.避免包含过多的属性；</p>
<p>​	2.有明确的定义；</p>
<p>​	3.尽量简化对象之间的合作关系；</p>
<p>​	4.不要提供太多服务。</p>
<p><strong>4.使用简单的协议</strong></p>
<p><strong>5.使用简单的服务</strong></p>
<p><strong>6.把设计变动减至最小</strong></p>
<hr>
<h4 id="软件重用"><a href="#软件重用" class="headerlink" title="软件重用"></a>软件重用</h4><p><strong>重用的三个层次：</strong></p>
<p>​    1）知识重用；</p>
<p>​    2）方法和标准的重用；</p>
<p>​    3）软件成分的重用。</p>
<p><strong>软件成分的重用级别：</strong></p>
<p>  1）代码重用</p>
<p>​    a. 源代码剪贴；</p>
<p>​    b. 源代码包含；</p>
<p>​    c. 继承；</p>
<p>  2）设计结果重用</p>
<p>  3）分析结果重用</p>
<p><strong>典型的可重用软件成分</strong></p>
<p>  <strong>1）项目计划；          2）成本计划；</strong></p>
<p>  <strong>3）体系结构；          4）需求模型和规格说明；</strong></p>
<p>  <strong>5）设计；              6）源代码；</strong></p>
<p>  <strong>7）用户文档和技术文档；8）用户界面；</strong></p>
<p>  <strong>9）数据；              10）测试用例。</strong></p>
<hr>
<h4 id="设计问题域子系统"><a href="#设计问题域子系统" class="headerlink" title="设计问题域子系统"></a>设计问题域子系统</h4><p><strong>1. 调整需求</strong></p>
<p><strong>2. 重用已有的类</strong></p>
<p><strong>3. 组合问题域的类</strong></p>
<p><strong>4. 增添基类以定义公共函数集合</strong></p>
<p><strong>5. 调整继承层次</strong></p>
<hr>
<h4 id="设计人机交互子系统"><a href="#设计人机交互子系统" class="headerlink" title="设计人机交互子系统"></a><strong>设计人机交互子系统</strong></h4><p><strong>设计人机交互子系统的策略：</strong></p>
<ol>
<li><p>分类用户；</p>
</li>
<li><p>描述用户；</p>
</li>
<li><p>设计命令层次；</p>
</li>
<li><p>设计人机交互类。</p>
</li>
</ol>
<hr>
<h4 id="设计数据管理子系统"><a href="#设计数据管理子系统" class="headerlink" title="设计数据管理子系统"></a>设计数据管理子系统</h4><p><strong>选择数据存储管理模式</strong></p>
<ol>
<li><p>文件管理系统</p>
</li>
<li><p>关系数据库管理系统</p>
</li>
<li><p>面向对象数据库管理系统</p>
</li>
</ol>
<hr>
<p><strong>面向对象语言的优点：</strong></p>
<ol>
<li>一致的表示方法</li>
<li>可重用性</li>
<li>可维护性</li>
</ol>
<p><strong>选择面向对象语言时应考虑的技术特点：</strong></p>
<ol>
<li><p>支持类与对象概念的机制</p>
</li>
<li><p>实现整体－部分（聚集）结构的机制</p>
</li>
<li><p>实现一般－特殊（泛化）结构的机制</p>
</li>
<li><p>实现属性和服务的机制</p>
</li>
<li><p>类型检查</p>
</li>
<li><p>类库</p>
</li>
<li><p>效率</p>
</li>
<li><p>持久保存对象</p>
</li>
<li><p>参数化类</p>
</li>
<li><p>开发环境</p>
</li>
</ol>
<p><strong>选择面向对象语言应考虑的因素：</strong></p>
<ol>
<li><p>将来能否占主导地位</p>
</li>
<li><p>可重用性</p>
</li>
<li><p>类库和开发环境</p>
</li>
<li><p>其他因素</p>
</li>
</ol>
<hr>
<h4 id="程序设计风格"><a href="#程序设计风格" class="headerlink" title="程序设计风格"></a>程序设计风格</h4><ol>
<li><strong>提高可重用性</strong></li>
<li><strong>提高可扩充性</strong></li>
<li><strong>提高健壮性</strong></li>
</ol>
<hr>
<p><strong>面向对象的集成测试</strong>：</p>
<p><strong>两种不同的测试策略：</strong></p>
<ol>
<li><p>基于<strong>线程</strong>的测试:将响应系统的一个输入或一个事件所需要的哪些类集成起来测试。</p>
</li>
<li><p>基于<strong>使用</strong>的测试先测试独立类，再测试使用独立类的下一层次的类（依赖类），重复直至完毕。</p>
</li>
</ol>
<p><strong>测试类的方法</strong>:</p>
<ol>
<li><p>随机测试</p>
</li>
<li><p>划分测试</p>
</li>
<li><p>基于故障的测试</p>
</li>
</ol>
<p><strong>集成测试方法</strong>:</p>
<p><strong>1. 多类测试</strong></p>
<p><strong>2. 从动态模型导出测试用例</strong></p>
]]></content>
      <categories>
        <category>软件工程导论</category>
      </categories>
      <tags>
        <tag>软件工程导论</tag>
      </tags>
  </entry>
</search>
